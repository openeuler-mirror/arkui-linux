# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//ace_engine/ft_build/ace_config.gni")

render_server_dir = "//third_party/ft_engine/display_server"

template("build_component_ng") {
  forward_variables_from(invoker, "*")

  component_name = target_name

  template("build_component_ng_impl") {
    forward_variables_from(invoker, "*")

    platform = target_name

    component_deps = []
    extra_deps = []
    foreach(item, component_deps) {
      extra_deps += [ "$ace_root/frameworks/core/components/${item}/ft_build:ace_core_components_${item}_${platform}" ]
    }

    component_v2_deps = []
    foreach(item, component_v2_deps) {
      extra_deps += [ "$ace_root/frameworks/core/components_v2/${item}/ft_build:ace_core_components_${item}_${platform}" ]
    }

    if (defined(component_v2_deps)) {
      foreach(item, component_v2_deps) {
        extra_deps += [ "$ace_root/frameworks/core/components_ng/${item}/ft_build:ace_core_components_${item}_${platform}" ]
      }
    }

    if (defined(platform_deps)) {
      foreach(item, platform_deps) {
        extra_deps += [ "${item}_${platform}" ]
      }
    }

    if (defined(deps)) {
      extra_deps += deps
    }

    ft_source_set("ace_core_components_${component_name}_${platform}") {
      defines += invoker.defines
      defines += [ "FT_BUILD" ]

      sources = []
      sources += invoker.sources

      configs = []
      configs += [ "$ace_root/ft_build:ace_config" ]

      if (defined(invoker.configs)) {
        configs += invoker.configs
      }

      deps = []
      deps += extra_deps
      deps += [ "$ace_root/frameworks/core/components/theme/ft_build:build_theme_code" ]
      deps += [ "//build/gn/configs/system_libs:ft_engine" ]

      if (enable_ng_build) {
        assert(false, "enable_ng_build is not supported")
      } else {
       public_deps = [
        "$ace_flutter_engine_root:third_party_flutter_engine_$platform",
        "$ace_flutter_engine_root/skia:ace_skia_$platform",
       ]
      }

      if (defined(invoker.public_configs)) {
        public_configs = []
        public_configs += invoker.public_configs
      }

      if (defined(invoker.aosp_deps)) {
        aosp_deps = []
        aosp_deps += invoker.aosp_deps
      }

      if (defined(invoker.external_deps)) {
        external_deps = []
        external_deps += invoker.external_deps
      }

      if (defined(invoker.external_deps_info)) {
        external_deps_info = []
        external_deps_info += invoker.external_deps_info
      }

      if (defined(invoker.cflags_cc)) {
        cflags_cc = []
        cflags_cc += invoker.cflags_cc
      }

      cflags_cc += [
        "-Wno-return-stack-address",
        "-Wno-sign-compare",
        "-Wno-unused-lambda-capture",
        "-Wno-c++11-narrowing"
      ]
      # using graphcis_2d drawing lib
      include_dirs = [
        # Fangtian TODO
        # "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
        "$render_server_dir/rosen/modules/2d_engine",
        "$render_server_dir/rosen/modules/2d_engine/rosen_text",
        "$render_server_dir/rosen/modules/2d_graphics/include",
        "$render_server_dir/rosen/modules/2d_graphics/src",
        "$render_server_dir/rosen/modules/2d_graphics/src/drawing/engine_adapter",
        # "//third_party/bounds_checking_function/include",
      ]

      deps += [ "$render_server_dir/rosen/modules/2d_graphics/ft_build:2d_graphics_source_$platform" ]

      deps += [
        "//build/gn/configs/system_libs:c_utils",
      ]

      if (defined(config.enable_rosen_backend) && config.enable_rosen_backend &&
          defined(invoker.rosen_sources)) {
        sources += invoker.rosen_sources
        # Fangtian TODO
        deps += [ "$render_server_dir/rosen/modules/render_service_client/ft_build:librender_service_client" ]
        # include_dirs +=
        #     [ "//foundation/window/window_manager/interfaces/innerkits" ]
      }

      if (defined(config.enable_standard_input) &&
          config.enable_standard_input) {
        assert(false, "enable_standard_input is not supported")
      }
    }
  }

  foreach(item, ace_platforms) {
    build_component_ng_impl(item.name) {
      platform = item.name
      defines = []

      if (defined(item.config)) {
        config = item.config
      } else {
        config = {
        }
      }

      if (defined(config.defines)) {
        defines += config.defines
      }

      if (defined(config.cflags_cc)) {
        cflags_cc = config.cflags_cc
      } else {
        cflags_cc = []
      }
    }
  }
}

