# Copyright (c) 2023 Huawei Technologies Co., Ltd. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#import("//build/ohos.gni")
import("//build/gn/fangtian.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

# build static
template("ace_capability_source_set") {
  forward_variables_from(invoker, "*")

  ft_source_set(target_name) {
    subsystem_name = ace_engine_subsystem
    part_name = ace_engine_part
    defines += invoker.defines

    configs = [ "$ace_root:ace_config" ]

    sources = [
      "clipboard/clipboard_impl.cpp",
      "distributed/storage/distributed_storage.cpp",
      "environment/environment_impl.cpp",
      "environment/environment_proxy_impl.cpp",
      "preference/storage_impl.cpp",
    ]
    include_dirs = []
    external_deps = [
      "ability_base:want",
      "data_object:distributeddataobject_impl",
      "ipc:ipc_core",
      "preferences:native_preferences",
    ]
    if (defined(config.enable_system_clipboard) &&
        config.enable_system_clipboard) {
      external_deps += [ "pasteboard:pasteboard_client" ]
      defines += [ "SYSTEM_CLIPBOARD_SUPPORTED" ]
    }
    if (defined(config.enable_ability_component) &&
        config.enable_ability_component) {
      external_deps += [
        "ability_base:want",
        "ability_runtime:ability_manager",
        "ability_runtime:abilitykit_native",
        "ability_runtime:runtime",
        "bundle_framework:appexecfwk_base",
        "c_utils:utils",
        "eventhandler:libeventhandler",
        "graphic_standard:surface",
        "hiviewdfx_hilog_native:libhilog",
        "input:libmmi-client",
        "ipc:ipc_core",
        "window_manager:libwindow_extension_client",
      ]
#deps = [ "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client" ]
      sources += [
        "window_connection/window_extension_connection_ohos.cpp",
        "window_connection/window_extension_connection_proxy.cpp",
        "window_connection_ng/window_extension_connection_ohos_ng.cpp",
        "window_connection_ng/window_extension_connection_proxy_ng.cpp",
      ]
    }
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  if (platform == "linux") {
    ace_capability_source_set("ace_capability_linux") {
      defines = []
      config = {
      }

      if (defined(item.config)) {
        config = item.config
      }
      if (defined(config.defines)) {
        defines = config.defines
      }
    }
  }
}
