# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/runtime_core/ft_build/ark_config.gni")

#jsoncpp_root = "$ark_third_party_root/jsoncpp"

config("ts2abc_config") {
  visibility = [ ":*" ]
  include_dirs = [
    ".",
    #"$jsoncpp_root/include",
    "$ark_root/libpandabase",
  ]

  if (enable_bytecode_optimizer) {
    defines = [ "ENABLE_BYTECODE_OPT" ]
  }
  if (ft_disable_assert) {
    defines += [ "FT_DISABLE_ASSERT" ]
  }

  configs = [
    "$ark_root/ft_build:ark_config",
    #sdk_libc_secshared_config,
    "$ark_root/libpandafile/ft_build:arkfile_public_config",
    "$ark_root/libpandabase/ft_build:arkbase_public_config",
    "$ark_root/runtime/ft_build:arkruntime_public_config",
    "$ark_root/assembler/ft_build:arkassembler_public_config",
    "//arkcompiler/ets_frontend/merge_abc/ft_build:panda_assembly_proto_public_config",
  ]

  if (enable_bytecode_optimizer) {
    configs += [
      "$ark_root/compiler/ft_build:arkcompiler_public_config",
      "$ark_root/bytecode_optimizer/ft_build:bytecodeopt_public_config",
    ]
  }
}

config("flag_config") {
  cflags_cc = [ "-fexceptions" ]
}

#source_set("jsoncpp_set_static") {
#  sources = [
#    "//third_party/jsoncpp/src/lib_json/json_reader.cpp",
#    "//third_party/jsoncpp/src/lib_json/json_value.cpp",
#    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
#  ]
#  #public_configs = [ "$jsoncpp_root:jsoncpp_config" ]
#  public_configs = [ ":flag_config" ]
#  include_dirs = [
#    #"$jsoncpp_root/include",
#    #"$jsoncpp_root/include/json/",
#  ]
#}

if (!ark_standalone_build) {
#  ft_static_library("jsoncpp_static") {
#    deps = [ ":jsoncpp_set_static" ]
#    use_exceptions = true
#    part_name = "ets_frontend"
#    subsystem_name = "arkcompiler"
#  }

  ft_executable("ts2abc") {
    part_name = "ets_frontend"
    subsystem_name = "arkcompiler"
    sources = [
      "../main.cpp",
      "../ts2abc.cpp",
    ]

    configs = [ ":ts2abc_config" ]

    cflags = [
      "-Wno-c++20-designator",
      "-Wno-c99-extensions",
      "-Wno-unknown-warning-option",
    ]

    deps = [
      "//arkcompiler/ets_frontend/merge_abc/ft_build:panda_assembly_proto_static",
      sdk_libc_secshared_dep,
    ]
    deps += [
      "//build/gn/configs/system_libs:c_utils",
      "//build/gn/configs/system_libs:cjson",
      "//build/gn/configs/system_libs:jsoncpp",
    ]


    if (is_linux || is_mingw || is_mac) {
      deps += [
        "$ark_root/assembler/ft_build:libarkassembler_frontend_static",
        "$ark_root/libpandabase/ft_build:libarkbase_frontend_static",
        "$ark_root/libpandafile/ft_build:libarkfile_frontend_static",
        "$ark_root/libziparchive/ft_build:libarkziparchive_frontend_static",
        #"//third_party/jsoncpp:jsoncpp_static",
      ]
      if (enable_bytecode_optimizer) {
        deps += [
          "$ark_root/bytecode_optimizer/ft_build:libarkbytecodeopt_frontend_static",
          "$ark_root/compiler/ft_build:libarkcompiler_frontend_static",
        ]
      }
    } else {
      deps += [
        "$ark_root/assembler/ft_build:libarkassembler",
        "$ark_root/libpandabase/ft_build:libarkbase",
        "$ark_root/libpandafile/ft_build:libarkfile",
        "$ark_root/libziparchive/ft_build:libarkziparchive",
        #"$jsoncpp_root:jsoncpp",
      ]
      if (enable_bytecode_optimizer) {
        deps += [
          "$ark_root/bytecode_optimizer/ft_build:libarkbytecodeopt",
          "$ark_root/compiler/ft_build:libarkcompiler",
        ]
      }
    }

    if (is_linux) {
      if (build_public_version) {
        #ldflags = [ "-static-libstdc++" ]
      } else {
        libs = [ libcpp_static_lib ]
      }
    }
    output_name = "js2abc"
  }
}
