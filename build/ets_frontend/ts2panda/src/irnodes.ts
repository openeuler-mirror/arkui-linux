// Copyright (c) 2021-2022 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { PandaGen } from "./pandagen"
// Autogenerated file -- DO NOT EDIT!
import * as ts from "typescript";
import {
  DebugPosInfo,
  NodeKind
} from "./debuginfo";
import { Scope } from "./scope";

export enum IRNodeKind {
  LDUNDEFINED,
  LDNULL,
  LDTRUE,
  LDFALSE,
  CREATEEMPTYOBJECT,
  CREATEEMPTYARRAY,
  CREATEARRAYWITHBUFFER,
  CREATEOBJECTWITHBUFFER,
  NEWOBJRANGE,
  NEWLEXENV,
  ADD2,
  SUB2,
  MUL2,
  DIV2,
  MOD2,
  EQ,
  NOTEQ,
  LESS,
  LESSEQ,
  GREATER,
  GREATEREQ,
  SHL2,
  SHR2,
  ASHR2,
  AND2,
  OR2,
  XOR2,
  EXP,
  TYPEOF,
  TONUMBER,
  TONUMERIC,
  NEG,
  NOT,
  INC,
  DEC,
  ISTRUE,
  ISFALSE,
  ISIN,
  INSTANCEOF,
  STRICTNOTEQ,
  STRICTEQ,
  CALLARG0,
  CALLARG1,
  CALLARGS2,
  CALLARGS3,
  CALLTHIS0,
  CALLTHIS1,
  CALLTHIS2,
  CALLTHIS3,
  CALLTHISRANGE,
  SUPERCALLTHISRANGE,
  DEFINEFUNC,
  DEFINEMETHOD,
  DEFINECLASSWITHBUFFER,
  GETNEXTPROPNAME,
  LDOBJBYVALUE,
  STOBJBYVALUE,
  LDSUPERBYVALUE,
  LDOBJBYINDEX,
  STOBJBYINDEX,
  LDLEXVAR,
  STLEXVAR,
  LDA_STR,
  TRYLDGLOBALBYNAME,
  TRYSTGLOBALBYNAME,
  LDGLOBALVAR,
  LDOBJBYNAME,
  STOBJBYNAME,
  MOV,
  LDSUPERBYNAME,
  STCONSTTOGLOBALRECORD,
  STTOGLOBALRECORD,
  LDTHISBYNAME,
  STTHISBYNAME,
  LDTHISBYVALUE,
  STTHISBYVALUE,
  JMP,
  JEQZ,
  JNEZ,
  JSTRICTEQZ,
  JNSTRICTEQZ,
  JEQNULL,
  JNENULL,
  JSTRICTEQNULL,
  JNSTRICTEQNULL,
  JEQUNDEFINED,
  JNEUNDEFINED,
  JSTRICTEQUNDEFINED,
  JNSTRICTEQUNDEFINED,
  JEQ,
  JNE,
  JSTRICTEQ,
  JNSTRICTEQ,
  LDA,
  STA,
  LDAI,
  FLDAI,
  RETURN,
  RETURNUNDEFINED,
  GETPROPITERATOR,
  GETITERATOR,
  CLOSEITERATOR,
  POPLEXENV,
  LDNAN,
  LDINFINITY,
  GETUNMAPPEDARGS,
  LDGLOBAL,
  LDNEWTARGET,
  LDTHIS,
  LDHOLE,
  CREATEREGEXPWITHLITERAL,
  CALLRANGE,
  GETTEMPLATEOBJECT,
  SETOBJECTWITHPROTO,
  STOWNBYVALUE,
  STOWNBYINDEX,
  STOWNBYNAME,
  GETMODULENAMESPACE,
  STMODULEVAR,
  LDLOCALMODULEVAR,
  LDEXTERNALMODULEVAR,
  STGLOBALVAR,
  STOWNBYNAMEWITHNAMESET,
  ASYNCGENERATORREJECT,
  STOWNBYVALUEWITHNAMESET,
  LDSYMBOL,
  ASYNCFUNCTIONENTER,
  LDFUNCTION,
  DEBUGGER,
  CREATEGENERATOROBJ,
  CREATEITERRESULTOBJ,
  CREATEOBJECTWITHEXCLUDEDKEYS,
  NEWOBJAPPLY,
  NEWLEXENVWITHNAME,
  CREATEASYNCGENERATOROBJ,
  ASYNCGENERATORRESOLVE,
  SUPERCALLSPREAD,
  APPLY,
  SUPERCALLARROWRANGE,
  DEFINEGETTERSETTERBYVALUE,
  DYNAMICIMPORT,
  RESUMEGENERATOR,
  GETRESUMEMODE,
  DELOBJPROP,
  SUSPENDGENERATOR,
  ASYNCFUNCTIONAWAITUNCAUGHT,
  COPYDATAPROPERTIES,
  STARRAYSPREAD,
  STSUPERBYVALUE,
  ASYNCFUNCTIONRESOLVE,
  ASYNCFUNCTIONREJECT,
  COPYRESTARGS,
  STSUPERBYNAME,
  LDBIGINT,
  NOP,
  SETGENERATORSTATE,
  GETASYNCITERATOR,
  CALLRUNTIME_NOTIFYCONCURRENTRESULT,
  DEPRECATED_LDLEXENV,
  WIDE_CREATEOBJECTWITHEXCLUDEDKEYS,
  THROW,
  DEPRECATED_POPLEXENV,
  WIDE_NEWOBJRANGE,
  THROW_NOTEXISTS,
  DEPRECATED_GETITERATORNEXT,
  WIDE_NEWLEXENV,
  THROW_PATTERNNONCOERCIBLE,
  DEPRECATED_CREATEARRAYWITHBUFFER,
  WIDE_NEWLEXENVWITHNAME,
  THROW_DELETESUPERPROPERTY,
  DEPRECATED_CREATEOBJECTWITHBUFFER,
  WIDE_CALLRANGE,
  THROW_CONSTASSIGNMENT,
  DEPRECATED_TONUMBER,
  WIDE_CALLTHISRANGE,
  THROW_IFNOTOBJECT,
  DEPRECATED_TONUMERIC,
  WIDE_SUPERCALLTHISRANGE,
  THROW_UNDEFINEDIFHOLE,
  DEPRECATED_NEG,
  WIDE_SUPERCALLARROWRANGE,
  THROW_IFSUPERNOTCORRECTCALL,
  DEPRECATED_NOT,
  WIDE_LDOBJBYINDEX,
  DEPRECATED_INC,
  WIDE_STOBJBYINDEX,
  THROW_UNDEFINEDIFHOLEWITHNAME,
  DEPRECATED_DEC,
  WIDE_STOWNBYINDEX,
  DEPRECATED_CALLARG0,
  WIDE_COPYRESTARGS,
  DEPRECATED_CALLARG1,
  WIDE_LDLEXVAR,
  DEPRECATED_CALLARGS2,
  WIDE_STLEXVAR,
  DEPRECATED_CALLARGS3,
  WIDE_GETMODULENAMESPACE,
  DEPRECATED_CALLRANGE,
  WIDE_STMODULEVAR,
  DEPRECATED_CALLSPREAD,
  WIDE_LDLOCALMODULEVAR,
  DEPRECATED_CALLTHISRANGE,
  WIDE_LDEXTERNALMODULEVAR,
  DEPRECATED_DEFINECLASSWITHBUFFER,
  WIDE_LDPATCHVAR,
  DEPRECATED_RESUMEGENERATOR,
  WIDE_STPATCHVAR,
  DEPRECATED_GETRESUMEMODE,
  DEPRECATED_GETTEMPLATEOBJECT,
  DEPRECATED_DELOBJPROP,
  DEPRECATED_SUSPENDGENERATOR,
  DEPRECATED_ASYNCFUNCTIONAWAITUNCAUGHT,
  DEPRECATED_COPYDATAPROPERTIES,
  DEPRECATED_SETOBJECTWITHPROTO,
  DEPRECATED_LDOBJBYVALUE,
  DEPRECATED_LDSUPERBYVALUE,
  DEPRECATED_LDOBJBYINDEX,
  DEPRECATED_ASYNCFUNCTIONRESOLVE,
  DEPRECATED_ASYNCFUNCTIONREJECT,
  DEPRECATED_STLEXVAR,
  DEPRECATED_GETMODULENAMESPACE,
  DEPRECATED_STMODULEVAR,
  DEPRECATED_LDOBJBYNAME,
  DEPRECATED_LDSUPERBYNAME,
  DEPRECATED_LDMODULEVAR,
  DEPRECATED_STCONSTTOGLOBALRECORD,
  DEPRECATED_STLETTOGLOBALRECORD,
  DEPRECATED_STCLASSTOGLOBALRECORD,
  DEPRECATED_LDHOMEOBJECT,
  DEPRECATED_CREATEOBJECTHAVINGMETHOD,
  DEPRECATED_DYNAMICIMPORT,
  DEPRECATED_ASYNCGENERATORREJECT,
  VREG,
  IMM,
  LABEL,
  VIRTUALSTARTINS_DYN,
  VIRTUALENDINS_DYN,
  DEFINE_GLOBAL_VAR,
}

export function getInstructionSize(opcode: IRNodeKind) {
  switch(opcode) {
    case IRNodeKind.LDUNDEFINED:
      return 1;
    case IRNodeKind.LDNULL:
      return 1;
    case IRNodeKind.LDTRUE:
      return 1;
    case IRNodeKind.LDFALSE:
      return 1;
    case IRNodeKind.CREATEEMPTYOBJECT:
      return 1;
    case IRNodeKind.CREATEEMPTYARRAY:
      return 2;
    case IRNodeKind.CREATEARRAYWITHBUFFER:
      return 4;
    case IRNodeKind.CREATEOBJECTWITHBUFFER:
      return 4;
    case IRNodeKind.NEWOBJRANGE:
      return 4;
    case IRNodeKind.NEWLEXENV:
      return 2;
    case IRNodeKind.ADD2:
      return 3;
    case IRNodeKind.SUB2:
      return 3;
    case IRNodeKind.MUL2:
      return 3;
    case IRNodeKind.DIV2:
      return 3;
    case IRNodeKind.MOD2:
      return 3;
    case IRNodeKind.EQ:
      return 3;
    case IRNodeKind.NOTEQ:
      return 3;
    case IRNodeKind.LESS:
      return 3;
    case IRNodeKind.LESSEQ:
      return 3;
    case IRNodeKind.GREATER:
      return 3;
    case IRNodeKind.GREATEREQ:
      return 3;
    case IRNodeKind.SHL2:
      return 3;
    case IRNodeKind.SHR2:
      return 3;
    case IRNodeKind.ASHR2:
      return 3;
    case IRNodeKind.AND2:
      return 3;
    case IRNodeKind.OR2:
      return 3;
    case IRNodeKind.XOR2:
      return 3;
    case IRNodeKind.EXP:
      return 3;
    case IRNodeKind.TYPEOF:
      return 2;
    case IRNodeKind.TONUMBER:
      return 2;
    case IRNodeKind.TONUMERIC:
      return 2;
    case IRNodeKind.NEG:
      return 2;
    case IRNodeKind.NOT:
      return 2;
    case IRNodeKind.INC:
      return 2;
    case IRNodeKind.DEC:
      return 2;
    case IRNodeKind.ISTRUE:
      return 1;
    case IRNodeKind.ISFALSE:
      return 1;
    case IRNodeKind.ISIN:
      return 3;
    case IRNodeKind.INSTANCEOF:
      return 3;
    case IRNodeKind.STRICTNOTEQ:
      return 3;
    case IRNodeKind.STRICTEQ:
      return 3;
    case IRNodeKind.CALLARG0:
      return 2;
    case IRNodeKind.CALLARG1:
      return 3;
    case IRNodeKind.CALLARGS2:
      return 4;
    case IRNodeKind.CALLARGS3:
      return 5;
    case IRNodeKind.CALLTHIS0:
      return 3;
    case IRNodeKind.CALLTHIS1:
      return 4;
    case IRNodeKind.CALLTHIS2:
      return 5;
    case IRNodeKind.CALLTHIS3:
      return 6;
    case IRNodeKind.CALLTHISRANGE:
      return 4;
    case IRNodeKind.SUPERCALLTHISRANGE:
      return 4;
    case IRNodeKind.DEFINEFUNC:
      return 5;
    case IRNodeKind.DEFINEMETHOD:
      return 5;
    case IRNodeKind.DEFINECLASSWITHBUFFER:
      return 9;
    case IRNodeKind.GETNEXTPROPNAME:
      return 2;
    case IRNodeKind.LDOBJBYVALUE:
      return 3;
    case IRNodeKind.STOBJBYVALUE:
      return 4;
    case IRNodeKind.LDSUPERBYVALUE:
      return 3;
    case IRNodeKind.LDOBJBYINDEX:
      return 4;
    case IRNodeKind.STOBJBYINDEX:
      return 5;
    case IRNodeKind.LDLEXVAR:
      return 2;
    case IRNodeKind.STLEXVAR:
      return 2;
    case IRNodeKind.LDA_STR:
      return 3;
    case IRNodeKind.TRYLDGLOBALBYNAME:
      return 4;
    case IRNodeKind.TRYSTGLOBALBYNAME:
      return 4;
    case IRNodeKind.LDGLOBALVAR:
      return 5;
    case IRNodeKind.LDOBJBYNAME:
      return 4;
    case IRNodeKind.STOBJBYNAME:
      return 5;
    case IRNodeKind.MOV:
      return 2;
    case IRNodeKind.MOV:
      return 3;
    case IRNodeKind.LDSUPERBYNAME:
      return 4;
    case IRNodeKind.STCONSTTOGLOBALRECORD:
      return 5;
    case IRNodeKind.STTOGLOBALRECORD:
      return 5;
    case IRNodeKind.LDTHISBYNAME:
      return 4;
    case IRNodeKind.STTHISBYNAME:
      return 4;
    case IRNodeKind.LDTHISBYVALUE:
      return 2;
    case IRNodeKind.STTHISBYVALUE:
      return 3;
    case IRNodeKind.JMP:
      return 2;
    case IRNodeKind.JMP:
      return 3;
    case IRNodeKind.JEQZ:
      return 2;
    case IRNodeKind.JEQZ:
      return 3;
    case IRNodeKind.JNEZ:
      return 2;
    case IRNodeKind.JSTRICTEQZ:
      return 2;
    case IRNodeKind.JNSTRICTEQZ:
      return 2;
    case IRNodeKind.JEQNULL:
      return 2;
    case IRNodeKind.JNENULL:
      return 2;
    case IRNodeKind.JSTRICTEQNULL:
      return 2;
    case IRNodeKind.JNSTRICTEQNULL:
      return 2;
    case IRNodeKind.JEQUNDEFINED:
      return 2;
    case IRNodeKind.JNEUNDEFINED:
      return 2;
    case IRNodeKind.JSTRICTEQUNDEFINED:
      return 2;
    case IRNodeKind.JNSTRICTEQUNDEFINED:
      return 2;
    case IRNodeKind.JEQ:
      return 3;
    case IRNodeKind.JNE:
      return 3;
    case IRNodeKind.JSTRICTEQ:
      return 3;
    case IRNodeKind.JNSTRICTEQ:
      return 3;
    case IRNodeKind.LDA:
      return 2;
    case IRNodeKind.STA:
      return 2;
    case IRNodeKind.LDAI:
      return 5;
    case IRNodeKind.FLDAI:
      return 9;
    case IRNodeKind.RETURN:
      return 1;
    case IRNodeKind.RETURNUNDEFINED:
      return 1;
    case IRNodeKind.GETPROPITERATOR:
      return 1;
    case IRNodeKind.GETITERATOR:
      return 2;
    case IRNodeKind.CLOSEITERATOR:
      return 3;
    case IRNodeKind.POPLEXENV:
      return 1;
    case IRNodeKind.LDNAN:
      return 1;
    case IRNodeKind.LDINFINITY:
      return 1;
    case IRNodeKind.GETUNMAPPEDARGS:
      return 1;
    case IRNodeKind.LDGLOBAL:
      return 1;
    case IRNodeKind.LDNEWTARGET:
      return 1;
    case IRNodeKind.LDTHIS:
      return 1;
    case IRNodeKind.LDHOLE:
      return 1;
    case IRNodeKind.CREATEREGEXPWITHLITERAL:
      return 5;
    case IRNodeKind.CREATEREGEXPWITHLITERAL:
      return 6;
    case IRNodeKind.CALLRANGE:
      return 4;
    case IRNodeKind.DEFINEFUNC:
      return 6;
    case IRNodeKind.DEFINECLASSWITHBUFFER:
      return 10;
    case IRNodeKind.GETTEMPLATEOBJECT:
      return 2;
    case IRNodeKind.SETOBJECTWITHPROTO:
      return 3;
    case IRNodeKind.STOWNBYVALUE:
      return 4;
    case IRNodeKind.STOWNBYINDEX:
      return 5;
    case IRNodeKind.STOWNBYNAME:
      return 5;
    case IRNodeKind.GETMODULENAMESPACE:
      return 2;
    case IRNodeKind.STMODULEVAR:
      return 2;
    case IRNodeKind.LDLOCALMODULEVAR:
      return 2;
    case IRNodeKind.LDEXTERNALMODULEVAR:
      return 2;
    case IRNodeKind.STGLOBALVAR:
      return 5;
    case IRNodeKind.CREATEEMPTYARRAY:
      return 3;
    case IRNodeKind.CREATEARRAYWITHBUFFER:
      return 5;
    case IRNodeKind.CREATEOBJECTWITHBUFFER:
      return 5;
    case IRNodeKind.NEWOBJRANGE:
      return 5;
    case IRNodeKind.TYPEOF:
      return 3;
    case IRNodeKind.LDOBJBYVALUE:
      return 4;
    case IRNodeKind.STOBJBYVALUE:
      return 5;
    case IRNodeKind.LDSUPERBYVALUE:
      return 4;
    case IRNodeKind.LDOBJBYINDEX:
      return 5;
    case IRNodeKind.STOBJBYINDEX:
      return 6;
    case IRNodeKind.LDLEXVAR:
      return 3;
    case IRNodeKind.STLEXVAR:
      return 3;
    case IRNodeKind.TRYLDGLOBALBYNAME:
      return 5;
    case IRNodeKind.TRYSTGLOBALBYNAME:
      return 5;
    case IRNodeKind.STOWNBYNAMEWITHNAMESET:
      return 5;
    case IRNodeKind.MOV:
      return 5;
    case IRNodeKind.LDOBJBYNAME:
      return 5;
    case IRNodeKind.STOBJBYNAME:
      return 6;
    case IRNodeKind.LDSUPERBYNAME:
      return 5;
    case IRNodeKind.LDTHISBYNAME:
      return 5;
    case IRNodeKind.STTHISBYNAME:
      return 5;
    case IRNodeKind.LDTHISBYVALUE:
      return 3;
    case IRNodeKind.STTHISBYVALUE:
      return 4;
    case IRNodeKind.ASYNCGENERATORREJECT:
      return 2;
    case IRNodeKind.JMP:
      return 5;
    case IRNodeKind.STOWNBYVALUEWITHNAMESET:
      return 4;
    case IRNodeKind.JEQZ:
      return 5;
    case IRNodeKind.JNEZ:
      return 3;
    case IRNodeKind.JNEZ:
      return 5;
    case IRNodeKind.JSTRICTEQZ:
      return 3;
    case IRNodeKind.JNSTRICTEQZ:
      return 3;
    case IRNodeKind.JEQNULL:
      return 3;
    case IRNodeKind.JNENULL:
      return 3;
    case IRNodeKind.JSTRICTEQNULL:
      return 3;
    case IRNodeKind.JNSTRICTEQNULL:
      return 3;
    case IRNodeKind.JEQUNDEFINED:
      return 3;
    case IRNodeKind.JNEUNDEFINED:
      return 3;
    case IRNodeKind.JSTRICTEQUNDEFINED:
      return 3;
    case IRNodeKind.JNSTRICTEQUNDEFINED:
      return 3;
    case IRNodeKind.JEQ:
      return 4;
    case IRNodeKind.JNE:
      return 4;
    case IRNodeKind.JSTRICTEQ:
      return 4;
    case IRNodeKind.JNSTRICTEQ:
      return 4;
    case IRNodeKind.GETITERATOR:
      return 3;
    case IRNodeKind.CLOSEITERATOR:
      return 4;
    case IRNodeKind.LDSYMBOL:
      return 1;
    case IRNodeKind.ASYNCFUNCTIONENTER:
      return 1;
    case IRNodeKind.LDFUNCTION:
      return 1;
    case IRNodeKind.DEBUGGER:
      return 1;
    case IRNodeKind.CREATEGENERATOROBJ:
      return 2;
    case IRNodeKind.CREATEITERRESULTOBJ:
      return 3;
    case IRNodeKind.CREATEOBJECTWITHEXCLUDEDKEYS:
      return 4;
    case IRNodeKind.NEWOBJAPPLY:
      return 3;
    case IRNodeKind.NEWOBJAPPLY:
      return 4;
    case IRNodeKind.NEWLEXENVWITHNAME:
      return 4;
    case IRNodeKind.CREATEASYNCGENERATOROBJ:
      return 2;
    case IRNodeKind.ASYNCGENERATORRESOLVE:
      return 4;
    case IRNodeKind.SUPERCALLSPREAD:
      return 3;
    case IRNodeKind.APPLY:
      return 4;
    case IRNodeKind.SUPERCALLARROWRANGE:
      return 4;
    case IRNodeKind.DEFINEGETTERSETTERBYVALUE:
      return 5;
    case IRNodeKind.DYNAMICIMPORT:
      return 1;
    case IRNodeKind.DEFINEMETHOD:
      return 6;
    case IRNodeKind.RESUMEGENERATOR:
      return 1;
    case IRNodeKind.GETRESUMEMODE:
      return 1;
    case IRNodeKind.GETTEMPLATEOBJECT:
      return 3;
    case IRNodeKind.DELOBJPROP:
      return 2;
    case IRNodeKind.SUSPENDGENERATOR:
      return 2;
    case IRNodeKind.ASYNCFUNCTIONAWAITUNCAUGHT:
      return 2;
    case IRNodeKind.COPYDATAPROPERTIES:
      return 2;
    case IRNodeKind.STARRAYSPREAD:
      return 3;
    case IRNodeKind.SETOBJECTWITHPROTO:
      return 4;
    case IRNodeKind.STOWNBYVALUE:
      return 5;
    case IRNodeKind.STSUPERBYVALUE:
      return 4;
    case IRNodeKind.STSUPERBYVALUE:
      return 5;
    case IRNodeKind.STOWNBYINDEX:
      return 6;
    case IRNodeKind.STOWNBYNAME:
      return 6;
    case IRNodeKind.ASYNCFUNCTIONRESOLVE:
      return 2;
    case IRNodeKind.ASYNCFUNCTIONREJECT:
      return 2;
    case IRNodeKind.COPYRESTARGS:
      return 2;
    case IRNodeKind.STSUPERBYNAME:
      return 5;
    case IRNodeKind.STSUPERBYNAME:
      return 6;
    case IRNodeKind.STOWNBYVALUEWITHNAMESET:
      return 5;
    case IRNodeKind.LDBIGINT:
      return 3;
    case IRNodeKind.STOWNBYNAMEWITHNAMESET:
      return 6;
    case IRNodeKind.NOP:
      return 1;
    case IRNodeKind.SETGENERATORSTATE:
      return 2;
    case IRNodeKind.GETASYNCITERATOR:
      return 2;
    case IRNodeKind.CALLRUNTIME_NOTIFYCONCURRENTRESULT:
      return 2;
    case IRNodeKind.DEPRECATED_LDLEXENV:
      return 2;
    case IRNodeKind.WIDE_CREATEOBJECTWITHEXCLUDEDKEYS:
      return 6;
    case IRNodeKind.THROW:
      return 2;
    case IRNodeKind.DEPRECATED_POPLEXENV:
      return 2;
    case IRNodeKind.WIDE_NEWOBJRANGE:
      return 5;
    case IRNodeKind.THROW_NOTEXISTS:
      return 2;
    case IRNodeKind.DEPRECATED_GETITERATORNEXT:
      return 4;
    case IRNodeKind.WIDE_NEWLEXENV:
      return 4;
    case IRNodeKind.THROW_PATTERNNONCOERCIBLE:
      return 2;
    case IRNodeKind.DEPRECATED_CREATEARRAYWITHBUFFER:
      return 4;
    case IRNodeKind.WIDE_NEWLEXENVWITHNAME:
      return 6;
    case IRNodeKind.THROW_DELETESUPERPROPERTY:
      return 2;
    case IRNodeKind.DEPRECATED_CREATEOBJECTWITHBUFFER:
      return 4;
    case IRNodeKind.WIDE_CALLRANGE:
      return 5;
    case IRNodeKind.THROW_CONSTASSIGNMENT:
      return 3;
    case IRNodeKind.DEPRECATED_TONUMBER:
      return 3;
    case IRNodeKind.WIDE_CALLTHISRANGE:
      return 5;
    case IRNodeKind.THROW_IFNOTOBJECT:
      return 3;
    case IRNodeKind.DEPRECATED_TONUMERIC:
      return 3;
    case IRNodeKind.WIDE_SUPERCALLTHISRANGE:
      return 5;
    case IRNodeKind.THROW_UNDEFINEDIFHOLE:
      return 4;
    case IRNodeKind.DEPRECATED_NEG:
      return 3;
    case IRNodeKind.WIDE_SUPERCALLARROWRANGE:
      return 5;
    case IRNodeKind.THROW_IFSUPERNOTCORRECTCALL:
      return 3;
    case IRNodeKind.DEPRECATED_NOT:
      return 3;
    case IRNodeKind.WIDE_LDOBJBYINDEX:
      return 6;
    case IRNodeKind.THROW_IFSUPERNOTCORRECTCALL:
      return 4;
    case IRNodeKind.DEPRECATED_INC:
      return 3;
    case IRNodeKind.WIDE_STOBJBYINDEX:
      return 7;
    case IRNodeKind.THROW_UNDEFINEDIFHOLEWITHNAME:
      return 4;
    case IRNodeKind.DEPRECATED_DEC:
      return 3;
    case IRNodeKind.WIDE_STOWNBYINDEX:
      return 7;
    case IRNodeKind.DEPRECATED_CALLARG0:
      return 3;
    case IRNodeKind.WIDE_COPYRESTARGS:
      return 4;
    case IRNodeKind.DEPRECATED_CALLARG1:
      return 4;
    case IRNodeKind.WIDE_LDLEXVAR:
      return 6;
    case IRNodeKind.DEPRECATED_CALLARGS2:
      return 5;
    case IRNodeKind.WIDE_STLEXVAR:
      return 6;
    case IRNodeKind.DEPRECATED_CALLARGS3:
      return 6;
    case IRNodeKind.WIDE_GETMODULENAMESPACE:
      return 4;
    case IRNodeKind.DEPRECATED_CALLRANGE:
      return 5;
    case IRNodeKind.WIDE_STMODULEVAR:
      return 4;
    case IRNodeKind.DEPRECATED_CALLSPREAD:
      return 5;
    case IRNodeKind.WIDE_LDLOCALMODULEVAR:
      return 4;
    case IRNodeKind.DEPRECATED_CALLTHISRANGE:
      return 5;
    case IRNodeKind.WIDE_LDEXTERNALMODULEVAR:
      return 4;
    case IRNodeKind.DEPRECATED_DEFINECLASSWITHBUFFER:
      return 10;
    case IRNodeKind.WIDE_LDPATCHVAR:
      return 4;
    case IRNodeKind.DEPRECATED_RESUMEGENERATOR:
      return 3;
    case IRNodeKind.WIDE_STPATCHVAR:
      return 4;
    case IRNodeKind.DEPRECATED_GETRESUMEMODE:
      return 3;
    case IRNodeKind.DEPRECATED_GETTEMPLATEOBJECT:
      return 3;
    case IRNodeKind.DEPRECATED_DELOBJPROP:
      return 4;
    case IRNodeKind.DEPRECATED_SUSPENDGENERATOR:
      return 4;
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONAWAITUNCAUGHT:
      return 4;
    case IRNodeKind.DEPRECATED_COPYDATAPROPERTIES:
      return 4;
    case IRNodeKind.DEPRECATED_SETOBJECTWITHPROTO:
      return 4;
    case IRNodeKind.DEPRECATED_LDOBJBYVALUE:
      return 4;
    case IRNodeKind.DEPRECATED_LDSUPERBYVALUE:
      return 4;
    case IRNodeKind.DEPRECATED_LDOBJBYINDEX:
      return 7;
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONRESOLVE:
      return 5;
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONREJECT:
      return 5;
    case IRNodeKind.DEPRECATED_STLEXVAR:
      return 4;
    case IRNodeKind.DEPRECATED_STLEXVAR:
      return 5;
    case IRNodeKind.DEPRECATED_STLEXVAR:
      return 7;
    case IRNodeKind.DEPRECATED_GETMODULENAMESPACE:
      return 6;
    case IRNodeKind.DEPRECATED_STMODULEVAR:
      return 6;
    case IRNodeKind.DEPRECATED_LDOBJBYNAME:
      return 7;
    case IRNodeKind.DEPRECATED_LDSUPERBYNAME:
      return 7;
    case IRNodeKind.DEPRECATED_LDMODULEVAR:
      return 7;
    case IRNodeKind.DEPRECATED_STCONSTTOGLOBALRECORD:
      return 6;
    case IRNodeKind.DEPRECATED_STLETTOGLOBALRECORD:
      return 6;
    case IRNodeKind.DEPRECATED_STCLASSTOGLOBALRECORD:
      return 6;
    case IRNodeKind.DEPRECATED_LDHOMEOBJECT:
      return 2;
    case IRNodeKind.DEPRECATED_CREATEOBJECTHAVINGMETHOD:
      return 4;
    case IRNodeKind.DEPRECATED_DYNAMICIMPORT:
      return 3;
    case IRNodeKind.DEPRECATED_ASYNCGENERATORREJECT:
      return 4;
    default:
      // LOGE("getInstructionSize: Unknown opcode:" + opcode);
      return 0;
  }
}

export enum ResultType {
  None,
  Unknown,
  Int,
  Long,
  Float,
  Obj,
  Boolean
}

export enum ResultDst {
  None,
  Acc,
  VReg
}

export enum BuiltIns {
  NaN,
  Infinity,
  globalThis,
  undefined,
  Boolean,
  Number,
  String,
  BigInt,
  Symbol,
  Null,
  Object,
  Function,
  Global,
  True,
  False,
  LexEnv,
  MAX_BUILTIN,
}

export type OperandType = VReg | Imm | Label | string | number

export enum OperandKind {
  // the least significant bit indicates vreg
  // the second bit indicates src or dst
  SrcVReg = 0, DstVReg, SrcDstVReg, Imm, Id, StringId, Label
}

export namespace OperandKind {
  // @ts-ignore
  function isVReg(kind: OperandKind): boolean {
    return kind === OperandKind.SrcVReg || kind === OperandKind.DstVReg || kind === OperandKind.SrcDstVReg;
  }
}

export type Format = number[][]

export function getInsnMnemonic(opcode: IRNodeKind): string {
  switch(opcode) {
    case IRNodeKind.LDUNDEFINED:
      return "ldundefined";
    case IRNodeKind.LDNULL:
      return "ldnull";
    case IRNodeKind.LDTRUE:
      return "ldtrue";
    case IRNodeKind.LDFALSE:
      return "ldfalse";
    case IRNodeKind.CREATEEMPTYOBJECT:
      return "createemptyobject";
    case IRNodeKind.CREATEEMPTYARRAY:
      return "createemptyarray";
    case IRNodeKind.CREATEARRAYWITHBUFFER:
      return "createarraywithbuffer";
    case IRNodeKind.CREATEOBJECTWITHBUFFER:
      return "createobjectwithbuffer";
    case IRNodeKind.NEWOBJRANGE:
      return "newobjrange";
    case IRNodeKind.NEWLEXENV:
      return "newlexenv";
    case IRNodeKind.ADD2:
      return "add2";
    case IRNodeKind.SUB2:
      return "sub2";
    case IRNodeKind.MUL2:
      return "mul2";
    case IRNodeKind.DIV2:
      return "div2";
    case IRNodeKind.MOD2:
      return "mod2";
    case IRNodeKind.EQ:
      return "eq";
    case IRNodeKind.NOTEQ:
      return "noteq";
    case IRNodeKind.LESS:
      return "less";
    case IRNodeKind.LESSEQ:
      return "lesseq";
    case IRNodeKind.GREATER:
      return "greater";
    case IRNodeKind.GREATEREQ:
      return "greatereq";
    case IRNodeKind.SHL2:
      return "shl2";
    case IRNodeKind.SHR2:
      return "shr2";
    case IRNodeKind.ASHR2:
      return "ashr2";
    case IRNodeKind.AND2:
      return "and2";
    case IRNodeKind.OR2:
      return "or2";
    case IRNodeKind.XOR2:
      return "xor2";
    case IRNodeKind.EXP:
      return "exp";
    case IRNodeKind.TYPEOF:
      return "typeof";
    case IRNodeKind.TONUMBER:
      return "tonumber";
    case IRNodeKind.TONUMERIC:
      return "tonumeric";
    case IRNodeKind.NEG:
      return "neg";
    case IRNodeKind.NOT:
      return "not";
    case IRNodeKind.INC:
      return "inc";
    case IRNodeKind.DEC:
      return "dec";
    case IRNodeKind.ISTRUE:
      return "istrue";
    case IRNodeKind.ISFALSE:
      return "isfalse";
    case IRNodeKind.ISIN:
      return "isin";
    case IRNodeKind.INSTANCEOF:
      return "instanceof";
    case IRNodeKind.STRICTNOTEQ:
      return "strictnoteq";
    case IRNodeKind.STRICTEQ:
      return "stricteq";
    case IRNodeKind.CALLARG0:
      return "callarg0";
    case IRNodeKind.CALLARG1:
      return "callarg1";
    case IRNodeKind.CALLARGS2:
      return "callargs2";
    case IRNodeKind.CALLARGS3:
      return "callargs3";
    case IRNodeKind.CALLTHIS0:
      return "callthis0";
    case IRNodeKind.CALLTHIS1:
      return "callthis1";
    case IRNodeKind.CALLTHIS2:
      return "callthis2";
    case IRNodeKind.CALLTHIS3:
      return "callthis3";
    case IRNodeKind.CALLTHISRANGE:
      return "callthisrange";
    case IRNodeKind.SUPERCALLTHISRANGE:
      return "supercallthisrange";
    case IRNodeKind.DEFINEFUNC:
      return "definefunc";
    case IRNodeKind.DEFINEMETHOD:
      return "definemethod";
    case IRNodeKind.DEFINECLASSWITHBUFFER:
      return "defineclasswithbuffer";
    case IRNodeKind.GETNEXTPROPNAME:
      return "getnextpropname";
    case IRNodeKind.LDOBJBYVALUE:
      return "ldobjbyvalue";
    case IRNodeKind.STOBJBYVALUE:
      return "stobjbyvalue";
    case IRNodeKind.LDSUPERBYVALUE:
      return "ldsuperbyvalue";
    case IRNodeKind.LDOBJBYINDEX:
      return "ldobjbyindex";
    case IRNodeKind.STOBJBYINDEX:
      return "stobjbyindex";
    case IRNodeKind.LDLEXVAR:
      return "ldlexvar";
    case IRNodeKind.STLEXVAR:
      return "stlexvar";
    case IRNodeKind.LDA_STR:
      return "lda.str";
    case IRNodeKind.TRYLDGLOBALBYNAME:
      return "tryldglobalbyname";
    case IRNodeKind.TRYSTGLOBALBYNAME:
      return "trystglobalbyname";
    case IRNodeKind.LDGLOBALVAR:
      return "ldglobalvar";
    case IRNodeKind.LDOBJBYNAME:
      return "ldobjbyname";
    case IRNodeKind.STOBJBYNAME:
      return "stobjbyname";
    case IRNodeKind.MOV:
      return "mov";
    case IRNodeKind.LDSUPERBYNAME:
      return "ldsuperbyname";
    case IRNodeKind.STCONSTTOGLOBALRECORD:
      return "stconsttoglobalrecord";
    case IRNodeKind.STTOGLOBALRECORD:
      return "sttoglobalrecord";
    case IRNodeKind.LDTHISBYNAME:
      return "ldthisbyname";
    case IRNodeKind.STTHISBYNAME:
      return "stthisbyname";
    case IRNodeKind.LDTHISBYVALUE:
      return "ldthisbyvalue";
    case IRNodeKind.STTHISBYVALUE:
      return "stthisbyvalue";
    case IRNodeKind.JMP:
      return "jmp";
    case IRNodeKind.JEQZ:
      return "jeqz";
    case IRNodeKind.JNEZ:
      return "jnez";
    case IRNodeKind.JSTRICTEQZ:
      return "jstricteqz";
    case IRNodeKind.JNSTRICTEQZ:
      return "jnstricteqz";
    case IRNodeKind.JEQNULL:
      return "jeqnull";
    case IRNodeKind.JNENULL:
      return "jnenull";
    case IRNodeKind.JSTRICTEQNULL:
      return "jstricteqnull";
    case IRNodeKind.JNSTRICTEQNULL:
      return "jnstricteqnull";
    case IRNodeKind.JEQUNDEFINED:
      return "jequndefined";
    case IRNodeKind.JNEUNDEFINED:
      return "jneundefined";
    case IRNodeKind.JSTRICTEQUNDEFINED:
      return "jstrictequndefined";
    case IRNodeKind.JNSTRICTEQUNDEFINED:
      return "jnstrictequndefined";
    case IRNodeKind.JEQ:
      return "jeq";
    case IRNodeKind.JNE:
      return "jne";
    case IRNodeKind.JSTRICTEQ:
      return "jstricteq";
    case IRNodeKind.JNSTRICTEQ:
      return "jnstricteq";
    case IRNodeKind.LDA:
      return "lda";
    case IRNodeKind.STA:
      return "sta";
    case IRNodeKind.LDAI:
      return "ldai";
    case IRNodeKind.FLDAI:
      return "fldai";
    case IRNodeKind.RETURN:
      return "return";
    case IRNodeKind.RETURNUNDEFINED:
      return "returnundefined";
    case IRNodeKind.GETPROPITERATOR:
      return "getpropiterator";
    case IRNodeKind.GETITERATOR:
      return "getiterator";
    case IRNodeKind.CLOSEITERATOR:
      return "closeiterator";
    case IRNodeKind.POPLEXENV:
      return "poplexenv";
    case IRNodeKind.LDNAN:
      return "ldnan";
    case IRNodeKind.LDINFINITY:
      return "ldinfinity";
    case IRNodeKind.GETUNMAPPEDARGS:
      return "getunmappedargs";
    case IRNodeKind.LDGLOBAL:
      return "ldglobal";
    case IRNodeKind.LDNEWTARGET:
      return "ldnewtarget";
    case IRNodeKind.LDTHIS:
      return "ldthis";
    case IRNodeKind.LDHOLE:
      return "ldhole";
    case IRNodeKind.CREATEREGEXPWITHLITERAL:
      return "createregexpwithliteral";
    case IRNodeKind.CALLRANGE:
      return "callrange";
    case IRNodeKind.GETTEMPLATEOBJECT:
      return "gettemplateobject";
    case IRNodeKind.SETOBJECTWITHPROTO:
      return "setobjectwithproto";
    case IRNodeKind.STOWNBYVALUE:
      return "stownbyvalue";
    case IRNodeKind.STOWNBYINDEX:
      return "stownbyindex";
    case IRNodeKind.STOWNBYNAME:
      return "stownbyname";
    case IRNodeKind.GETMODULENAMESPACE:
      return "getmodulenamespace";
    case IRNodeKind.STMODULEVAR:
      return "stmodulevar";
    case IRNodeKind.LDLOCALMODULEVAR:
      return "ldlocalmodulevar";
    case IRNodeKind.LDEXTERNALMODULEVAR:
      return "ldexternalmodulevar";
    case IRNodeKind.STGLOBALVAR:
      return "stglobalvar";
    case IRNodeKind.STOWNBYNAMEWITHNAMESET:
      return "stownbynamewithnameset";
    case IRNodeKind.ASYNCGENERATORREJECT:
      return "asyncgeneratorreject";
    case IRNodeKind.STOWNBYVALUEWITHNAMESET:
      return "stownbyvaluewithnameset";
    case IRNodeKind.LDSYMBOL:
      return "ldsymbol";
    case IRNodeKind.ASYNCFUNCTIONENTER:
      return "asyncfunctionenter";
    case IRNodeKind.LDFUNCTION:
      return "ldfunction";
    case IRNodeKind.DEBUGGER:
      return "debugger";
    case IRNodeKind.CREATEGENERATOROBJ:
      return "creategeneratorobj";
    case IRNodeKind.CREATEITERRESULTOBJ:
      return "createiterresultobj";
    case IRNodeKind.CREATEOBJECTWITHEXCLUDEDKEYS:
      return "createobjectwithexcludedkeys";
    case IRNodeKind.NEWOBJAPPLY:
      return "newobjapply";
    case IRNodeKind.NEWLEXENVWITHNAME:
      return "newlexenvwithname";
    case IRNodeKind.CREATEASYNCGENERATOROBJ:
      return "createasyncgeneratorobj";
    case IRNodeKind.ASYNCGENERATORRESOLVE:
      return "asyncgeneratorresolve";
    case IRNodeKind.SUPERCALLSPREAD:
      return "supercallspread";
    case IRNodeKind.APPLY:
      return "apply";
    case IRNodeKind.SUPERCALLARROWRANGE:
      return "supercallarrowrange";
    case IRNodeKind.DEFINEGETTERSETTERBYVALUE:
      return "definegettersetterbyvalue";
    case IRNodeKind.DYNAMICIMPORT:
      return "dynamicimport";
    case IRNodeKind.RESUMEGENERATOR:
      return "resumegenerator";
    case IRNodeKind.GETRESUMEMODE:
      return "getresumemode";
    case IRNodeKind.DELOBJPROP:
      return "delobjprop";
    case IRNodeKind.SUSPENDGENERATOR:
      return "suspendgenerator";
    case IRNodeKind.ASYNCFUNCTIONAWAITUNCAUGHT:
      return "asyncfunctionawaituncaught";
    case IRNodeKind.COPYDATAPROPERTIES:
      return "copydataproperties";
    case IRNodeKind.STARRAYSPREAD:
      return "starrayspread";
    case IRNodeKind.STSUPERBYVALUE:
      return "stsuperbyvalue";
    case IRNodeKind.ASYNCFUNCTIONRESOLVE:
      return "asyncfunctionresolve";
    case IRNodeKind.ASYNCFUNCTIONREJECT:
      return "asyncfunctionreject";
    case IRNodeKind.COPYRESTARGS:
      return "copyrestargs";
    case IRNodeKind.STSUPERBYNAME:
      return "stsuperbyname";
    case IRNodeKind.LDBIGINT:
      return "ldbigint";
    case IRNodeKind.NOP:
      return "nop";
    case IRNodeKind.SETGENERATORSTATE:
      return "setgeneratorstate";
    case IRNodeKind.GETASYNCITERATOR:
      return "getasynciterator";
    case IRNodeKind.CALLRUNTIME_NOTIFYCONCURRENTRESULT:
      return "callruntime.notifyconcurrentresult";
    case IRNodeKind.DEPRECATED_LDLEXENV:
      return "deprecated.ldlexenv";
    case IRNodeKind.WIDE_CREATEOBJECTWITHEXCLUDEDKEYS:
      return "wide.createobjectwithexcludedkeys";
    case IRNodeKind.THROW:
      return "throw";
    case IRNodeKind.DEPRECATED_POPLEXENV:
      return "deprecated.poplexenv";
    case IRNodeKind.WIDE_NEWOBJRANGE:
      return "wide.newobjrange";
    case IRNodeKind.THROW_NOTEXISTS:
      return "throw.notexists";
    case IRNodeKind.DEPRECATED_GETITERATORNEXT:
      return "deprecated.getiteratornext";
    case IRNodeKind.WIDE_NEWLEXENV:
      return "wide.newlexenv";
    case IRNodeKind.THROW_PATTERNNONCOERCIBLE:
      return "throw.patternnoncoercible";
    case IRNodeKind.DEPRECATED_CREATEARRAYWITHBUFFER:
      return "deprecated.createarraywithbuffer";
    case IRNodeKind.WIDE_NEWLEXENVWITHNAME:
      return "wide.newlexenvwithname";
    case IRNodeKind.THROW_DELETESUPERPROPERTY:
      return "throw.deletesuperproperty";
    case IRNodeKind.DEPRECATED_CREATEOBJECTWITHBUFFER:
      return "deprecated.createobjectwithbuffer";
    case IRNodeKind.WIDE_CALLRANGE:
      return "wide.callrange";
    case IRNodeKind.THROW_CONSTASSIGNMENT:
      return "throw.constassignment";
    case IRNodeKind.DEPRECATED_TONUMBER:
      return "deprecated.tonumber";
    case IRNodeKind.WIDE_CALLTHISRANGE:
      return "wide.callthisrange";
    case IRNodeKind.THROW_IFNOTOBJECT:
      return "throw.ifnotobject";
    case IRNodeKind.DEPRECATED_TONUMERIC:
      return "deprecated.tonumeric";
    case IRNodeKind.WIDE_SUPERCALLTHISRANGE:
      return "wide.supercallthisrange";
    case IRNodeKind.THROW_UNDEFINEDIFHOLE:
      return "throw.undefinedifhole";
    case IRNodeKind.DEPRECATED_NEG:
      return "deprecated.neg";
    case IRNodeKind.WIDE_SUPERCALLARROWRANGE:
      return "wide.supercallarrowrange";
    case IRNodeKind.THROW_IFSUPERNOTCORRECTCALL:
      return "throw.ifsupernotcorrectcall";
    case IRNodeKind.DEPRECATED_NOT:
      return "deprecated.not";
    case IRNodeKind.WIDE_LDOBJBYINDEX:
      return "wide.ldobjbyindex";
    case IRNodeKind.DEPRECATED_INC:
      return "deprecated.inc";
    case IRNodeKind.WIDE_STOBJBYINDEX:
      return "wide.stobjbyindex";
    case IRNodeKind.THROW_UNDEFINEDIFHOLEWITHNAME:
      return "throw.undefinedifholewithname";
    case IRNodeKind.DEPRECATED_DEC:
      return "deprecated.dec";
    case IRNodeKind.WIDE_STOWNBYINDEX:
      return "wide.stownbyindex";
    case IRNodeKind.DEPRECATED_CALLARG0:
      return "deprecated.callarg0";
    case IRNodeKind.WIDE_COPYRESTARGS:
      return "wide.copyrestargs";
    case IRNodeKind.DEPRECATED_CALLARG1:
      return "deprecated.callarg1";
    case IRNodeKind.WIDE_LDLEXVAR:
      return "wide.ldlexvar";
    case IRNodeKind.DEPRECATED_CALLARGS2:
      return "deprecated.callargs2";
    case IRNodeKind.WIDE_STLEXVAR:
      return "wide.stlexvar";
    case IRNodeKind.DEPRECATED_CALLARGS3:
      return "deprecated.callargs3";
    case IRNodeKind.WIDE_GETMODULENAMESPACE:
      return "wide.getmodulenamespace";
    case IRNodeKind.DEPRECATED_CALLRANGE:
      return "deprecated.callrange";
    case IRNodeKind.WIDE_STMODULEVAR:
      return "wide.stmodulevar";
    case IRNodeKind.DEPRECATED_CALLSPREAD:
      return "deprecated.callspread";
    case IRNodeKind.WIDE_LDLOCALMODULEVAR:
      return "wide.ldlocalmodulevar";
    case IRNodeKind.DEPRECATED_CALLTHISRANGE:
      return "deprecated.callthisrange";
    case IRNodeKind.WIDE_LDEXTERNALMODULEVAR:
      return "wide.ldexternalmodulevar";
    case IRNodeKind.DEPRECATED_DEFINECLASSWITHBUFFER:
      return "deprecated.defineclasswithbuffer";
    case IRNodeKind.WIDE_LDPATCHVAR:
      return "wide.ldpatchvar";
    case IRNodeKind.DEPRECATED_RESUMEGENERATOR:
      return "deprecated.resumegenerator";
    case IRNodeKind.WIDE_STPATCHVAR:
      return "wide.stpatchvar";
    case IRNodeKind.DEPRECATED_GETRESUMEMODE:
      return "deprecated.getresumemode";
    case IRNodeKind.DEPRECATED_GETTEMPLATEOBJECT:
      return "deprecated.gettemplateobject";
    case IRNodeKind.DEPRECATED_DELOBJPROP:
      return "deprecated.delobjprop";
    case IRNodeKind.DEPRECATED_SUSPENDGENERATOR:
      return "deprecated.suspendgenerator";
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONAWAITUNCAUGHT:
      return "deprecated.asyncfunctionawaituncaught";
    case IRNodeKind.DEPRECATED_COPYDATAPROPERTIES:
      return "deprecated.copydataproperties";
    case IRNodeKind.DEPRECATED_SETOBJECTWITHPROTO:
      return "deprecated.setobjectwithproto";
    case IRNodeKind.DEPRECATED_LDOBJBYVALUE:
      return "deprecated.ldobjbyvalue";
    case IRNodeKind.DEPRECATED_LDSUPERBYVALUE:
      return "deprecated.ldsuperbyvalue";
    case IRNodeKind.DEPRECATED_LDOBJBYINDEX:
      return "deprecated.ldobjbyindex";
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONRESOLVE:
      return "deprecated.asyncfunctionresolve";
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONREJECT:
      return "deprecated.asyncfunctionreject";
    case IRNodeKind.DEPRECATED_STLEXVAR:
      return "deprecated.stlexvar";
    case IRNodeKind.DEPRECATED_GETMODULENAMESPACE:
      return "deprecated.getmodulenamespace";
    case IRNodeKind.DEPRECATED_STMODULEVAR:
      return "deprecated.stmodulevar";
    case IRNodeKind.DEPRECATED_LDOBJBYNAME:
      return "deprecated.ldobjbyname";
    case IRNodeKind.DEPRECATED_LDSUPERBYNAME:
      return "deprecated.ldsuperbyname";
    case IRNodeKind.DEPRECATED_LDMODULEVAR:
      return "deprecated.ldmodulevar";
    case IRNodeKind.DEPRECATED_STCONSTTOGLOBALRECORD:
      return "deprecated.stconsttoglobalrecord";
    case IRNodeKind.DEPRECATED_STLETTOGLOBALRECORD:
      return "deprecated.stlettoglobalrecord";
    case IRNodeKind.DEPRECATED_STCLASSTOGLOBALRECORD:
      return "deprecated.stclasstoglobalrecord";
    case IRNodeKind.DEPRECATED_LDHOMEOBJECT:
      return "deprecated.ldhomeobject";
    case IRNodeKind.DEPRECATED_CREATEOBJECTHAVINGMETHOD:
      return "deprecated.createobjecthavingmethod";
    case IRNodeKind.DEPRECATED_DYNAMICIMPORT:
      return "deprecated.dynamicimport";
    case IRNodeKind.DEPRECATED_ASYNCGENERATORREJECT:
      return "deprecated.asyncgeneratorreject";
    default:
      return '';
  }
}

export function getInsnFormats(opcode: IRNodeKind) {
  switch(opcode) {
    case IRNodeKind.LDUNDEFINED: {
      return [
        []
      ];
    }
    case IRNodeKind.LDNULL: {
      return [
        []
      ];
    }
    case IRNodeKind.LDTRUE: {
      return [
        []
      ];
    }
    case IRNodeKind.LDFALSE: {
      return [
        []
      ];
    }
    case IRNodeKind.CREATEEMPTYOBJECT: {
      return [
        []
      ];
    }
    case IRNodeKind.CREATEEMPTYARRAY: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.CREATEARRAYWITHBUFFER: {
      return [
        [[3, 8], [4, 16]],
        [[3, 16], [4, 16]]
      ];
    }
    case IRNodeKind.CREATEOBJECTWITHBUFFER: {
      return [
        [[3, 8], [4, 16]],
        [[3, 16], [4, 16]]
      ];
    }
    case IRNodeKind.NEWOBJRANGE: {
      return [
        [[3, 8], [3, 8], [0, 8]],
        [[3, 16], [3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.NEWLEXENV: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.ADD2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SUB2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.MUL2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DIV2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.MOD2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.EQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.NOTEQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.LESS: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.LESSEQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.GREATER: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.GREATEREQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SHL2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SHR2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.ASHR2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.AND2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.OR2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.XOR2: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.EXP: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.TYPEOF: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.TONUMBER: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.TONUMERIC: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.NEG: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.NOT: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.INC: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.DEC: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.ISTRUE: {
      return [
        []
      ];
    }
    case IRNodeKind.ISFALSE: {
      return [
        []
      ];
    }
    case IRNodeKind.ISIN: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.INSTANCEOF: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.STRICTNOTEQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.STRICTEQ: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLARG0: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.CALLARG1: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLARGS2: {
      return [
        [[3, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLARGS3: {
      return [
        [[3, 8], [0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLTHIS0: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLTHIS1: {
      return [
        [[3, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLTHIS2: {
      return [
        [[3, 8], [0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLTHIS3: {
      return [
        [[3, 8], [0, 8], [0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CALLTHISRANGE: {
      return [
        [[3, 8], [3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SUPERCALLTHISRANGE: {
      return [
        [[3, 8], [3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEFINEFUNC: {
      return [
        [[3, 8], [4, 16], [3, 8]],
        [[3, 16], [4, 16], [3, 8]]
      ];
    }
    case IRNodeKind.DEFINEMETHOD: {
      return [
        [[3, 8], [4, 16], [3, 8]],
        [[3, 16], [4, 16], [3, 8]]
      ];
    }
    case IRNodeKind.DEFINECLASSWITHBUFFER: {
      return [
        [[3, 8], [4, 16], [4, 16], [3, 16], [0, 8]],
        [[3, 16], [4, 16], [4, 16], [3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.GETNEXTPROPNAME: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.LDOBJBYVALUE: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.STOBJBYVALUE: {
      return [
        [[3, 8], [0, 8], [0, 8]],
        [[3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.LDSUPERBYVALUE: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.LDOBJBYINDEX: {
      return [
        [[3, 8], [3, 16]],
        [[3, 16], [3, 16]]
      ];
    }
    case IRNodeKind.STOBJBYINDEX: {
      return [
        [[3, 8], [0, 8], [3, 16]],
        [[3, 16], [0, 8], [3, 16]]
      ];
    }
    case IRNodeKind.LDLEXVAR: {
      return [
        [[3, 4], [3, 4]],
        [[3, 8], [3, 8]]
      ];
    }
    case IRNodeKind.STLEXVAR: {
      return [
        [[3, 4], [3, 4]],
        [[3, 8], [3, 8]]
      ];
    }
    case IRNodeKind.LDA_STR: {
      return [
        [[5, 16]]
      ];
    }
    case IRNodeKind.TRYLDGLOBALBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.TRYSTGLOBALBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.LDGLOBALVAR: {
      return [
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.LDOBJBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.STOBJBYNAME: {
      return [
        [[3, 8], [5, 16], [0, 8]],
        [[3, 16], [5, 16], [0, 8]]
      ];
    }
    case IRNodeKind.MOV: {
      return [
        [[1, 4], [0, 4]],
        [[1, 8], [0, 8]],
        [[1, 16], [0, 16]]
      ];
    }
    case IRNodeKind.LDSUPERBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.STCONSTTOGLOBALRECORD: {
      return [
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.STTOGLOBALRECORD: {
      return [
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.LDTHISBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.STTHISBYNAME: {
      return [
        [[3, 8], [5, 16]],
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.LDTHISBYVALUE: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.STTHISBYVALUE: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.JMP: {
      return [
        [[6, 8]],
        [[6, 16]],
        [[6, 32]]
      ];
    }
    case IRNodeKind.JEQZ: {
      return [
        [[6, 8]],
        [[6, 16]],
        [[6, 32]]
      ];
    }
    case IRNodeKind.JNEZ: {
      return [
        [[6, 8]],
        [[6, 16]],
        [[6, 32]]
      ];
    }
    case IRNodeKind.JSTRICTEQZ: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JNSTRICTEQZ: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JEQNULL: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JNENULL: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JSTRICTEQNULL: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JNSTRICTEQNULL: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JEQUNDEFINED: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JNEUNDEFINED: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JSTRICTEQUNDEFINED: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JNSTRICTEQUNDEFINED: {
      return [
        [[6, 8]],
        [[6, 16]]
      ];
    }
    case IRNodeKind.JEQ: {
      return [
        [[0, 8], [6, 8]],
        [[0, 8], [6, 16]]
      ];
    }
    case IRNodeKind.JNE: {
      return [
        [[0, 8], [6, 8]],
        [[0, 8], [6, 16]]
      ];
    }
    case IRNodeKind.JSTRICTEQ: {
      return [
        [[0, 8], [6, 8]],
        [[0, 8], [6, 16]]
      ];
    }
    case IRNodeKind.JNSTRICTEQ: {
      return [
        [[0, 8], [6, 8]],
        [[0, 8], [6, 16]]
      ];
    }
    case IRNodeKind.LDA: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.STA: {
      return [
        [[1, 8]]
      ];
    }
    case IRNodeKind.LDAI: {
      return [
        [[3, 32]]
      ];
    }
    case IRNodeKind.FLDAI: {
      return [
        [[3, 64]]
      ];
    }
    case IRNodeKind.RETURN: {
      return [
        []
      ];
    }
    case IRNodeKind.RETURNUNDEFINED: {
      return [
        []
      ];
    }
    case IRNodeKind.GETPROPITERATOR: {
      return [
        []
      ];
    }
    case IRNodeKind.GETITERATOR: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.CLOSEITERATOR: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.POPLEXENV: {
      return [
        []
      ];
    }
    case IRNodeKind.LDNAN: {
      return [
        []
      ];
    }
    case IRNodeKind.LDINFINITY: {
      return [
        []
      ];
    }
    case IRNodeKind.GETUNMAPPEDARGS: {
      return [
        []
      ];
    }
    case IRNodeKind.LDGLOBAL: {
      return [
        []
      ];
    }
    case IRNodeKind.LDNEWTARGET: {
      return [
        []
      ];
    }
    case IRNodeKind.LDTHIS: {
      return [
        []
      ];
    }
    case IRNodeKind.LDHOLE: {
      return [
        []
      ];
    }
    case IRNodeKind.CREATEREGEXPWITHLITERAL: {
      return [
        [[3, 8], [5, 16], [3, 8]],
        [[3, 16], [5, 16], [3, 8]]
      ];
    }
    case IRNodeKind.CALLRANGE: {
      return [
        [[3, 8], [3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.GETTEMPLATEOBJECT: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.SETOBJECTWITHPROTO: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.STOWNBYVALUE: {
      return [
        [[3, 8], [0, 8], [0, 8]],
        [[3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.STOWNBYINDEX: {
      return [
        [[3, 8], [0, 8], [3, 16]],
        [[3, 16], [0, 8], [3, 16]]
      ];
    }
    case IRNodeKind.STOWNBYNAME: {
      return [
        [[3, 8], [5, 16], [0, 8]],
        [[3, 16], [5, 16], [0, 8]]
      ];
    }
    case IRNodeKind.GETMODULENAMESPACE: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.STMODULEVAR: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.LDLOCALMODULEVAR: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.LDEXTERNALMODULEVAR: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.STGLOBALVAR: {
      return [
        [[3, 16], [5, 16]]
      ];
    }
    case IRNodeKind.STOWNBYNAMEWITHNAMESET: {
      return [
        [[3, 8], [5, 16], [0, 8]],
        [[3, 16], [5, 16], [0, 8]]
      ];
    }
    case IRNodeKind.ASYNCGENERATORREJECT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.STOWNBYVALUEWITHNAMESET: {
      return [
        [[3, 8], [0, 8], [0, 8]],
        [[3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.LDSYMBOL: {
      return [
        []
      ];
    }
    case IRNodeKind.ASYNCFUNCTIONENTER: {
      return [
        []
      ];
    }
    case IRNodeKind.LDFUNCTION: {
      return [
        []
      ];
    }
    case IRNodeKind.DEBUGGER: {
      return [
        []
      ];
    }
    case IRNodeKind.CREATEGENERATOROBJ: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.CREATEITERRESULTOBJ: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.CREATEOBJECTWITHEXCLUDEDKEYS: {
      return [
        [[3, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.NEWOBJAPPLY: {
      return [
        [[3, 8], [0, 8]],
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.NEWLEXENVWITHNAME: {
      return [
        [[3, 8], [4, 16]]
      ];
    }
    case IRNodeKind.CREATEASYNCGENERATOROBJ: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.ASYNCGENERATORRESOLVE: {
      return [
        [[0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SUPERCALLSPREAD: {
      return [
        [[3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.APPLY: {
      return [
        [[3, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.SUPERCALLARROWRANGE: {
      return [
        [[3, 8], [3, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEFINEGETTERSETTERBYVALUE: {
      return [
        [[0, 8], [0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DYNAMICIMPORT: {
      return [
        []
      ];
    }
    case IRNodeKind.RESUMEGENERATOR: {
      return [
        []
      ];
    }
    case IRNodeKind.GETRESUMEMODE: {
      return [
        []
      ];
    }
    case IRNodeKind.DELOBJPROP: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.SUSPENDGENERATOR: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.ASYNCFUNCTIONAWAITUNCAUGHT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.COPYDATAPROPERTIES: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.STARRAYSPREAD: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.STSUPERBYVALUE: {
      return [
        [[3, 8], [0, 8], [0, 8]],
        [[3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.ASYNCFUNCTIONRESOLVE: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.ASYNCFUNCTIONREJECT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.COPYRESTARGS: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.STSUPERBYNAME: {
      return [
        [[3, 8], [5, 16], [0, 8]],
        [[3, 16], [5, 16], [0, 8]]
      ];
    }
    case IRNodeKind.LDBIGINT: {
      return [
        [[5, 16]]
      ];
    }
    case IRNodeKind.NOP: {
      return [
        []
      ];
    }
    case IRNodeKind.SETGENERATORSTATE: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.GETASYNCITERATOR: {
      return [
        [[3, 8]]
      ];
    }
    case IRNodeKind.CALLRUNTIME_NOTIFYCONCURRENTRESULT: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_LDLEXENV: {
      return [
        []
      ];
    }
    case IRNodeKind.WIDE_CREATEOBJECTWITHEXCLUDEDKEYS: {
      return [
        [[3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.THROW: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_POPLEXENV: {
      return [
        []
      ];
    }
    case IRNodeKind.WIDE_NEWOBJRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.THROW_NOTEXISTS: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_GETITERATORNEXT: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_NEWLEXENV: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.THROW_PATTERNNONCOERCIBLE: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_CREATEARRAYWITHBUFFER: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.WIDE_NEWLEXENVWITHNAME: {
      return [
        [[3, 16], [4, 16]]
      ];
    }
    case IRNodeKind.THROW_DELETESUPERPROPERTY: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_CREATEOBJECTWITHBUFFER: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.WIDE_CALLRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.THROW_CONSTASSIGNMENT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_TONUMBER: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_CALLTHISRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.THROW_IFNOTOBJECT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_TONUMERIC: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_SUPERCALLTHISRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.THROW_UNDEFINEDIFHOLE: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_NEG: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_SUPERCALLARROWRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.THROW_IFSUPERNOTCORRECTCALL: {
      return [
        [[3, 8]],
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_NOT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_LDOBJBYINDEX: {
      return [
        [[3, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_INC: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_STOBJBYINDEX: {
      return [
        [[0, 8], [3, 32]]
      ];
    }
    case IRNodeKind.THROW_UNDEFINEDIFHOLEWITHNAME: {
      return [
        [[5, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_DEC: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_STOWNBYINDEX: {
      return [
        [[0, 8], [3, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLARG0: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_COPYRESTARGS: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLARG1: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_LDLEXVAR: {
      return [
        [[3, 16], [3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLARGS2: {
      return [
        [[0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_STLEXVAR: {
      return [
        [[3, 16], [3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLARGS3: {
      return [
        [[0, 8], [0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_GETMODULENAMESPACE: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_STMODULEVAR: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLSPREAD: {
      return [
        [[0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_LDLOCALMODULEVAR: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_CALLTHISRANGE: {
      return [
        [[3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_LDEXTERNALMODULEVAR: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_DEFINECLASSWITHBUFFER: {
      return [
        [[4, 16], [3, 16], [3, 16], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.WIDE_LDPATCHVAR: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_RESUMEGENERATOR: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.WIDE_STPATCHVAR: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_GETRESUMEMODE: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_GETTEMPLATEOBJECT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_DELOBJPROP: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_SUSPENDGENERATOR: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONAWAITUNCAUGHT: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_COPYDATAPROPERTIES: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_SETOBJECTWITHPROTO: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDOBJBYVALUE: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDSUPERBYVALUE: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDOBJBYINDEX: {
      return [
        [[0, 8], [3, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONRESOLVE: {
      return [
        [[0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_ASYNCFUNCTIONREJECT: {
      return [
        [[0, 8], [0, 8], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_STLEXVAR: {
      return [
        [[3, 4], [3, 4], [0, 8]],
        [[3, 8], [3, 8], [0, 8]],
        [[3, 16], [3, 16], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_GETMODULENAMESPACE: {
      return [
        [[5, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_STMODULEVAR: {
      return [
        [[5, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDOBJBYNAME: {
      return [
        [[5, 32], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDSUPERBYNAME: {
      return [
        [[5, 32], [0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDMODULEVAR: {
      return [
        [[5, 32], [3, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_STCONSTTOGLOBALRECORD: {
      return [
        [[5, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_STLETTOGLOBALRECORD: {
      return [
        [[5, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_STCLASSTOGLOBALRECORD: {
      return [
        [[5, 32]]
      ];
    }
    case IRNodeKind.DEPRECATED_LDHOMEOBJECT: {
      return [
        []
      ];
    }
    case IRNodeKind.DEPRECATED_CREATEOBJECTHAVINGMETHOD: {
      return [
        [[3, 16]]
      ];
    }
    case IRNodeKind.DEPRECATED_DYNAMICIMPORT: {
      return [
        [[0, 8]]
      ];
    }
    case IRNodeKind.DEPRECATED_ASYNCGENERATORREJECT: {
      return [
        [[0, 8], [0, 8]]
      ];
    }
    default:
      return [];
  }
}

export abstract class IRNode {
  private node: ts.Node | NodeKind = NodeKind.Normal;
  public static pg: PandaGen | undefined = undefined;
  constructor(
    readonly kind: IRNodeKind,
    readonly operands: OperandType[],
  ) {}
  // for debuginfo
  public debugPosInfo: DebugPosInfo = new DebugPosInfo();

  toString(): string {
    let mnemonic = this.getMnemonic();
    let out = mnemonic + "\t";
    if (mnemonic.length < 8) {
      out += "\t";
    }

    this.operands.forEach((element) => {
      out = out + element.toString() + ", ";
    });

    return out;
  }

  setNode(node: ts.Node | NodeKind) {
    this.node = node;
  }

  getNodeName() {
    if (this.node != NodeKind.Invalid &&
        this.node != NodeKind.FirstNodeOfFunction &&
        this.node != NodeKind.Normal) {
      return ts.SyntaxKind[(<ts.Node>this.node).kind];
    }

    return "undefined";
  }

  getMnemonic() {
    return getInsnMnemonic(this.kind);
  }

  getFormats() {
    return getInsnFormats(this.kind);
  }

  static setPandagen(pg: PandaGen) {
    IRNode.pg = pg;
  }
}

export class VReg {
  private typeIndex: number | undefined;
  private variableName: string | undefined;
  num: number = -1;

  toString(): string {
      return "V" + this.num;
  }

  constructor() {
  }

  getTypeIndex() {
    return this.typeIndex;
  }

  setTypeIndex(typeIndex: number) {
    this.typeIndex = typeIndex;
  }

  getVariableName() {
    return this.variableName;
  }

  setVariableName(variableName: string) {
    this.variableName = variableName;
  }
}

export class Imm extends IRNode {
  readonly value: number;

  constructor(value: number) {
    super(IRNodeKind.IMM, []);
    this.value = value;
  }

  toString(): string {
    return "#" + this.value;
  }
}

export class Label extends IRNode {
  private static global_id = 0;
  readonly id: number;

  constructor() {
    super(IRNodeKind.LABEL, []);
    this.id = Label.global_id++;
  }

  static resetGlobalId() {
    Label.global_id = 0;
  }

  toString(): string {
    return "LABEL_" + this.id;
  }
}

export class DebugInsStartPlaceHolder extends IRNode {
  private scope: Scope;

  constructor(scope: Scope) {
    super(IRNodeKind.VIRTUALSTARTINS_DYN, []);
    this.scope = scope;
  }

  getScope() {
    return this.scope;
  }
}

export class DebugInsEndPlaceHolder extends IRNode {
  private scope: Scope;

  constructor(scope: Scope) {
    super(IRNodeKind.VIRTUALENDINS_DYN, []);
    this.scope = scope;
  }

  getScope() {
    return this.scope;
  }
}

export class Ldundefined extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDUNDEFINED,
      []
    );
  }
}

export class Ldnull extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDNULL,
      []
    );
  }
}

export class Ldtrue extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDTRUE,
      []
    );
  }
}

export class Ldfalse extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDFALSE,
      []
    );
  }
}

export class Createemptyobject extends IRNode {
  constructor() {
    super(
      IRNodeKind.CREATEEMPTYOBJECT,
      []
    );
  }
}

export class Createemptyarray extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.CREATEEMPTYARRAY,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Createarraywithbuffer extends IRNode {
  constructor(imm: Imm, literalarray_id: string) {
    super(
      IRNodeKind.CREATEARRAYWITHBUFFER,
      [imm, literalarray_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Createobjectwithbuffer extends IRNode {
  constructor(imm: Imm, literalarray_id: string) {
    super(
      IRNodeKind.CREATEOBJECTWITHBUFFER,
      [imm, literalarray_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Newobjrange extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg[]) {
    var ctors = [imm1, imm2, ...v]
    var operands:OperandType[] = [imm1, imm2]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.NEWOBJRANGE,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Newlexenv extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.NEWLEXENV,
      [imm]
    );
  }
}

export class Add2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.ADD2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Sub2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.SUB2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Mul2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.MUL2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Div2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.DIV2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Mod2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.MOD2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Eq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.EQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Noteq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.NOTEQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Less extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.LESS,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Lesseq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.LESSEQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Greater extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.GREATER,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Greatereq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.GREATEREQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Shl2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.SHL2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Shr2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.SHR2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ashr2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.ASHR2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class And2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.AND2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Or2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.OR2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Xor2 extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.XOR2,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Exp extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.EXP,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Typeof extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.TYPEOF,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Tonumber extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.TONUMBER,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Tonumeric extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.TONUMERIC,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Neg extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.NEG,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Not extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.NOT,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Inc extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.INC,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Dec extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.DEC,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Istrue extends IRNode {
  constructor() {
    super(
      IRNodeKind.ISTRUE,
      []
    );
  }
}

export class Isfalse extends IRNode {
  constructor() {
    super(
      IRNodeKind.ISFALSE,
      []
    );
  }
}

export class Isin extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.ISIN,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Instanceof extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.INSTANCEOF,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Strictnoteq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.STRICTNOTEQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stricteq extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.STRICTEQ,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 1) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callarg0 extends IRNode {
  constructor(imm: Imm) {
    var ctors = [imm]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLARG0,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callarg1 extends IRNode {
  constructor(imm: Imm, v?: VReg) {
    var ctors = [imm, v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLARG1,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callargs2 extends IRNode {
  constructor(imm: Imm, v1?: VReg, v2?: VReg) {
    var ctors = [imm, v1, v2]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLARGS2,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callargs3 extends IRNode {
  constructor(imm: Imm, v1?: VReg, v2?: VReg, v3?: VReg) {
    var ctors = [imm, v1, v2, v3]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLARGS3,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callthis0 extends IRNode {
  constructor(imm: Imm, v?: VReg) {
    var ctors = [imm, v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLTHIS0,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callthis1 extends IRNode {
  constructor(imm: Imm, v1?: VReg, v2?: VReg) {
    var ctors = [imm, v1, v2]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLTHIS1,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callthis2 extends IRNode {
  constructor(imm: Imm, v1?: VReg, v2?: VReg, v3?: VReg) {
    var ctors = [imm, v1, v2, v3]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLTHIS2,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callthis3 extends IRNode {
  constructor(imm: Imm, v1?: VReg, v2?: VReg, v3?: VReg, v4?: VReg) {
    var ctors = [imm, v1, v2, v3, v4]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLTHIS3,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callthisrange extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg[]) {
    var ctors = [imm1, imm2, ...v]
    var operands:OperandType[] = [imm1, imm2]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLTHISRANGE,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Supercallthisrange extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg[]) {
    var ctors = [imm1, imm2, ...v]
    var operands:OperandType[] = [imm1, imm2]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.SUPERCALLTHISRANGE,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Definefunc extends IRNode {
  constructor(imm1: Imm, method_id: string, imm2: Imm) {
    super(
      IRNodeKind.DEFINEFUNC,
      [imm1, method_id, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Definemethod extends IRNode {
  constructor(imm1: Imm, method_id: string, imm2: Imm) {
    super(
      IRNodeKind.DEFINEMETHOD,
      [imm1, method_id, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Defineclasswithbuffer extends IRNode {
  constructor(imm1: Imm, method_id: string, literalarray_id: string, imm2: Imm, v: VReg) {
    super(
      IRNodeKind.DEFINECLASSWITHBUFFER,
      [imm1, method_id, literalarray_id, imm2, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Getnextpropname extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.GETNEXTPROPNAME,
      [v]
    );
  }
}

export class Ldobjbyvalue extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.LDOBJBYVALUE,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stobjbyvalue extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.STOBJBYVALUE,
      [imm, v1, v2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldsuperbyvalue extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.LDSUPERBYVALUE,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldobjbyindex extends IRNode {
  constructor(imm1: Imm, imm2: Imm) {
    super(
      IRNodeKind.LDOBJBYINDEX,
      [imm1, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stobjbyindex extends IRNode {
  constructor(imm1: Imm, v: VReg, imm2: Imm) {
    super(
      IRNodeKind.STOBJBYINDEX,
      [imm1, v, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldlexvar extends IRNode {
  constructor(imm1: Imm, imm2: Imm) {
    super(
      IRNodeKind.LDLEXVAR,
      [imm1, imm2]
    );
  }
}

export class Stlexvar extends IRNode {
  constructor(imm1: Imm, imm2: Imm) {
    super(
      IRNodeKind.STLEXVAR,
      [imm1, imm2]
    );
  }
}

export class LdaStr extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.LDA_STR,
      [string_id]
    );
  }
}

export class Tryldglobalbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.TRYLDGLOBALBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Trystglobalbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.TRYSTGLOBALBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldglobalvar extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.LDGLOBALVAR,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldobjbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.LDOBJBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stobjbyname extends IRNode {
  constructor(imm: Imm, string_id: string, v: VReg) {
    super(
      IRNodeKind.STOBJBYNAME,
      [imm, string_id, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Mov extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.MOV,
      [v1, v2]
    );
  }
}

export class Ldsuperbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.LDSUPERBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stconsttoglobalrecord extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.STCONSTTOGLOBALRECORD,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Sttoglobalrecord extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.STTOGLOBALRECORD,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldthisbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.LDTHISBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stthisbyname extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.STTHISBYNAME,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldthisbyvalue extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.LDTHISBYVALUE,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stthisbyvalue extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.STTHISBYVALUE,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Jmp extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JMP,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jeqz extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JEQZ,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jnez extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNEZ,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jstricteqz extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JSTRICTEQZ,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jnstricteqz extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNSTRICTEQZ,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jeqnull extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JEQNULL,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jnenull extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNENULL,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jstricteqnull extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JSTRICTEQNULL,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jnstricteqnull extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNSTRICTEQNULL,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jequndefined extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JEQUNDEFINED,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jneundefined extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNEUNDEFINED,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jstrictequndefined extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JSTRICTEQUNDEFINED,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jnstrictequndefined extends IRNode {
  constructor(imm: Label) {
    super(
      IRNodeKind.JNSTRICTEQUNDEFINED,
      [imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[0];
  }
}

export class Jeq extends IRNode {
  constructor(v: VReg, imm: Label) {
    super(
      IRNodeKind.JEQ,
      [v, imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[1];
  }
}

export class Jne extends IRNode {
  constructor(v: VReg, imm: Label) {
    super(
      IRNodeKind.JNE,
      [v, imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[1];
  }
}

export class Jstricteq extends IRNode {
  constructor(v: VReg, imm: Label) {
    super(
      IRNodeKind.JSTRICTEQ,
      [v, imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[1];
  }
}

export class Jnstricteq extends IRNode {
  constructor(v: VReg, imm: Label) {
    super(
      IRNodeKind.JNSTRICTEQ,
      [v, imm]
    );
  }

  getTarget(): Label {
    return <Label> this.operands[1];
  }
}

export class Lda extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.LDA,
      [v]
    );
  }
}

export class Sta extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.STA,
      [v]
    );
  }
}

export class Ldai extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.LDAI,
      [imm]
    );
  }
}

export class Fldai extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.FLDAI,
      [imm]
    );
  }
}

export class Return extends IRNode {
  constructor() {
    super(
      IRNodeKind.RETURN,
      []
    );
  }
}

export class Returnundefined extends IRNode {
  constructor() {
    super(
      IRNodeKind.RETURNUNDEFINED,
      []
    );
  }
}

export class Getpropiterator extends IRNode {
  constructor() {
    super(
      IRNodeKind.GETPROPITERATOR,
      []
    );
  }
}

export class Getiterator extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.GETITERATOR,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Closeiterator extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.CLOSEITERATOR,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Poplexenv extends IRNode {
  constructor() {
    super(
      IRNodeKind.POPLEXENV,
      []
    );
  }
}

export class Ldnan extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDNAN,
      []
    );
  }
}

export class Ldinfinity extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDINFINITY,
      []
    );
  }
}

export class Getunmappedargs extends IRNode {
  constructor() {
    super(
      IRNodeKind.GETUNMAPPEDARGS,
      []
    );
  }
}

export class Ldglobal extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDGLOBAL,
      []
    );
  }
}

export class Ldnewtarget extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDNEWTARGET,
      []
    );
  }
}

export class Ldthis extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDTHIS,
      []
    );
  }
}

export class Ldhole extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDHOLE,
      []
    );
  }
}

export class Createregexpwithliteral extends IRNode {
  constructor(imm1: Imm, string_id: string, imm2: Imm) {
    super(
      IRNodeKind.CREATEREGEXPWITHLITERAL,
      [imm1, string_id, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Callrange extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg[]) {
    var ctors = [imm1, imm2, ...v]
    var operands:OperandType[] = [imm1, imm2]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CALLRANGE,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Gettemplateobject extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.GETTEMPLATEOBJECT,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Setobjectwithproto extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.SETOBJECTWITHPROTO,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stownbyvalue extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.STOWNBYVALUE,
      [imm, v1, v2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stownbyindex extends IRNode {
  constructor(imm1: Imm, v: VReg, imm2: Imm) {
    super(
      IRNodeKind.STOWNBYINDEX,
      [imm1, v, imm2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stownbyname extends IRNode {
  constructor(imm: Imm, string_id: string, v: VReg) {
    super(
      IRNodeKind.STOWNBYNAME,
      [imm, string_id, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Getmodulenamespace extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.GETMODULENAMESPACE,
      [imm]
    );
  }
}

export class Stmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.STMODULEVAR,
      [imm]
    );
  }
}

export class Ldlocalmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.LDLOCALMODULEVAR,
      [imm]
    );
  }
}

export class Ldexternalmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.LDEXTERNALMODULEVAR,
      [imm]
    );
  }
}

export class Stglobalvar extends IRNode {
  constructor(imm: Imm, string_id: string) {
    super(
      IRNodeKind.STGLOBALVAR,
      [imm, string_id]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 1) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 1 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(1);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(1);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Stownbynamewithnameset extends IRNode {
  constructor(imm: Imm, string_id: string, v: VReg) {
    super(
      IRNodeKind.STOWNBYNAMEWITHNAMESET,
      [imm, string_id, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Asyncgeneratorreject extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.ASYNCGENERATORREJECT,
      [v]
    );
  }
}

export class Stownbyvaluewithnameset extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.STOWNBYVALUEWITHNAMESET,
      [imm, v1, v2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldsymbol extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDSYMBOL,
      []
    );
  }
}

export class Asyncfunctionenter extends IRNode {
  constructor() {
    super(
      IRNodeKind.ASYNCFUNCTIONENTER,
      []
    );
  }
}

export class Ldfunction extends IRNode {
  constructor() {
    super(
      IRNodeKind.LDFUNCTION,
      []
    );
  }
}

export class Debugger extends IRNode {
  constructor() {
    super(
      IRNodeKind.DEBUGGER,
      []
    );
  }
}

export class Creategeneratorobj extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.CREATEGENERATOROBJ,
      [v]
    );
  }
}

export class Createiterresultobj extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.CREATEITERRESULTOBJ,
      [v1, v2]
    );
  }
}

export class Createobjectwithexcludedkeys extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg[]) {
    var ctors = [imm, v1, ...v2]
    var operands:OperandType[] = [imm, v1]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.CREATEOBJECTWITHEXCLUDEDKEYS,
      operands,
    );
  }
}

export class Newobjapply extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.NEWOBJAPPLY,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Newlexenvwithname extends IRNode {
  constructor(imm: Imm, literalarray_id: string) {
    super(
      IRNodeKind.NEWLEXENVWITHNAME,
      [imm, literalarray_id]
    );
  }
}

export class Createasyncgeneratorobj extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.CREATEASYNCGENERATOROBJ,
      [v]
    );
  }
}

export class Asyncgeneratorresolve extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg) {
    super(
      IRNodeKind.ASYNCGENERATORRESOLVE,
      [v1, v2, v3]
    );
  }
}

export class Supercallspread extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.SUPERCALLSPREAD,
      [imm, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Apply extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.APPLY,
      [imm, v1, v2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Supercallarrowrange extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg[]) {
    var ctors = [imm1, imm2, ...v]
    var operands:OperandType[] = [imm1, imm2]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.SUPERCALLARROWRANGE,
      operands,
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize < invalid) {
        if ((icSize + 2) > invalid) {
            this.operands[0] = new Imm(invalid);
            (<PandaGen>(IRNode.pg)).updateIcSize((256 - icSize));
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Definegettersetterbyvalue extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg, v4: VReg) {
    super(
      IRNodeKind.DEFINEGETTERSETTERBYVALUE,
      [v1, v2, v3, v4]
    );
  }
}

export class Dynamicimport extends IRNode {
  constructor() {
    super(
      IRNodeKind.DYNAMICIMPORT,
      []
    );
  }
}

export class Resumegenerator extends IRNode {
  constructor() {
    super(
      IRNodeKind.RESUMEGENERATOR,
      []
    );
  }
}

export class Getresumemode extends IRNode {
  constructor() {
    super(
      IRNodeKind.GETRESUMEMODE,
      []
    );
  }
}

export class Delobjprop extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DELOBJPROP,
      [v]
    );
  }
}

export class Suspendgenerator extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.SUSPENDGENERATOR,
      [v]
    );
  }
}

export class Asyncfunctionawaituncaught extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.ASYNCFUNCTIONAWAITUNCAUGHT,
      [v]
    );
  }
}

export class Copydataproperties extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.COPYDATAPROPERTIES,
      [v]
    );
  }
}

export class Starrayspread extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.STARRAYSPREAD,
      [v1, v2]
    );
  }
}

export class Stsuperbyvalue extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.STSUPERBYVALUE,
      [imm, v1, v2]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Asyncfunctionresolve extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.ASYNCFUNCTIONRESOLVE,
      [v]
    );
  }
}

export class Asyncfunctionreject extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.ASYNCFUNCTIONREJECT,
      [v]
    );
  }
}

export class Copyrestargs extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.COPYRESTARGS,
      [imm]
    );
  }
}

export class Stsuperbyname extends IRNode {
  constructor(imm: Imm, string_id: string, v: VReg) {
    super(
      IRNodeKind.STSUPERBYNAME,
      [imm, string_id, v]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class Ldbigint extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.LDBIGINT,
      [string_id]
    );
  }
}

export class Nop extends IRNode {
  constructor() {
    super(
      IRNodeKind.NOP,
      []
    );
  }
}

export class Setgeneratorstate extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.SETGENERATORSTATE,
      [imm]
    );
  }
}

export class Getasynciterator extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.GETASYNCITERATOR,
      [imm]
    );
    let invalid = 255;
    let icSize = (<PandaGen>(IRNode.pg)).getIcSize();
    if (icSize <= invalid) {
        if ((icSize + 2) > 255)  {
            this.operands[0] = new Imm(256);
            let inc = 2 + 256 - icSize;
            (<PandaGen>(IRNode.pg)).updateIcSize(inc);
        } else {
            this.operands[0] = new Imm(icSize);
            (<PandaGen>(IRNode.pg)).updateIcSize(2);
        }
    } else if(icSize > invalid && icSize <= 65535) {
        this.operands[0] = new Imm(icSize);
        (<PandaGen>(IRNode.pg)).updateIcSize(2);
    } else {
        this.operands[0] = new Imm(invalid);
    }
  }
}

export class CallruntimeNotifyconcurrentresult extends IRNode {
  constructor() {
    super(
      IRNodeKind.CALLRUNTIME_NOTIFYCONCURRENTRESULT,
      []
    );
  }
}

export class DeprecatedLdlexenv extends IRNode {
  constructor() {
    super(
      IRNodeKind.DEPRECATED_LDLEXENV,
      []
    );
  }
}

export class WideCreateobjectwithexcludedkeys extends IRNode {
  constructor(imm: Imm, v1: VReg, v2: VReg[]) {
    var ctors = [imm, v1, ...v2]
    var operands:OperandType[] = [imm, v1]
    ctors.shift()
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_CREATEOBJECTWITHEXCLUDEDKEYS,
      operands,
    );
  }
}

export class Throw extends IRNode {
  constructor() {
    super(
      IRNodeKind.THROW,
      []
    );
  }
}

export class DeprecatedPoplexenv extends IRNode {
  constructor() {
    super(
      IRNodeKind.DEPRECATED_POPLEXENV,
      []
    );
  }
}

export class WideNewobjrange extends IRNode {
  constructor(imm: Imm, v: VReg[]) {
    var ctors = [imm, ...v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_NEWOBJRANGE,
      operands,
    );
  }
}

export class ThrowNotexists extends IRNode {
  constructor() {
    super(
      IRNodeKind.THROW_NOTEXISTS,
      []
    );
  }
}

export class DeprecatedGetiteratornext extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_GETITERATORNEXT,
      [v1, v2]
    );
  }
}

export class WideNewlexenv extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_NEWLEXENV,
      [imm]
    );
  }
}

export class ThrowPatternnoncoercible extends IRNode {
  constructor() {
    super(
      IRNodeKind.THROW_PATTERNNONCOERCIBLE,
      []
    );
  }
}

export class DeprecatedCreatearraywithbuffer extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.DEPRECATED_CREATEARRAYWITHBUFFER,
      [imm]
    );
  }
}

export class WideNewlexenvwithname extends IRNode {
  constructor(imm: Imm, literalarray_id: string) {
    super(
      IRNodeKind.WIDE_NEWLEXENVWITHNAME,
      [imm, literalarray_id]
    );
  }
}

export class ThrowDeletesuperproperty extends IRNode {
  constructor() {
    super(
      IRNodeKind.THROW_DELETESUPERPROPERTY,
      []
    );
  }
}

export class DeprecatedCreateobjectwithbuffer extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.DEPRECATED_CREATEOBJECTWITHBUFFER,
      [imm]
    );
  }
}

export class WideCallrange extends IRNode {
  constructor(imm: Imm, v: VReg[]) {
    var ctors = [imm, ...v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_CALLRANGE,
      operands,
    );
  }
}

export class ThrowConstassignment extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.THROW_CONSTASSIGNMENT,
      [v]
    );
  }
}

export class DeprecatedTonumber extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_TONUMBER,
      [v]
    );
  }
}

export class WideCallthisrange extends IRNode {
  constructor(imm: Imm, v: VReg[]) {
    var ctors = [imm, ...v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_CALLTHISRANGE,
      operands,
    );
  }
}

export class ThrowIfnotobject extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.THROW_IFNOTOBJECT,
      [v]
    );
  }
}

export class DeprecatedTonumeric extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_TONUMERIC,
      [v]
    );
  }
}

export class WideSupercallthisrange extends IRNode {
  constructor(imm: Imm, v: VReg[]) {
    var ctors = [imm, ...v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_SUPERCALLTHISRANGE,
      operands,
    );
  }
}

export class ThrowUndefinedifhole extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.THROW_UNDEFINEDIFHOLE,
      [v1, v2]
    );
  }
}

export class DeprecatedNeg extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_NEG,
      [v]
    );
  }
}

export class WideSupercallarrowrange extends IRNode {
  constructor(imm: Imm, v: VReg[]) {
    var ctors = [imm, ...v]
    var operands:OperandType[] = [imm]
    ctors.shift()
    while (!!(ctors && ctors.length)){
      let ctor = ctors.shift()
      if (ctor != undefined) {
        operands.push(ctor)
      }
    }
    super(
      IRNodeKind.WIDE_SUPERCALLARROWRANGE,
      operands,
    );
  }
}

export class ThrowIfsupernotcorrectcall extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.THROW_IFSUPERNOTCORRECTCALL,
      [imm]
    );
  }
}

export class DeprecatedNot extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_NOT,
      [v]
    );
  }
}

export class WideLdobjbyindex extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_LDOBJBYINDEX,
      [imm]
    );
  }
}

export class DeprecatedInc extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_INC,
      [v]
    );
  }
}

export class WideStobjbyindex extends IRNode {
  constructor(v: VReg, imm: Imm) {
    super(
      IRNodeKind.WIDE_STOBJBYINDEX,
      [v, imm]
    );
  }
}

export class ThrowUndefinedifholewithname extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.THROW_UNDEFINEDIFHOLEWITHNAME,
      [string_id]
    );
  }
}

export class DeprecatedDec extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_DEC,
      [v]
    );
  }
}

export class WideStownbyindex extends IRNode {
  constructor(v: VReg, imm: Imm) {
    super(
      IRNodeKind.WIDE_STOWNBYINDEX,
      [v, imm]
    );
  }
}

export class DeprecatedCallarg0 extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLARG0,
      [v]
    );
  }
}

export class WideCopyrestargs extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_COPYRESTARGS,
      [imm]
    );
  }
}

export class DeprecatedCallarg1 extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLARG1,
      [v1, v2]
    );
  }
}

export class WideLdlexvar extends IRNode {
  constructor(imm1: Imm, imm2: Imm) {
    super(
      IRNodeKind.WIDE_LDLEXVAR,
      [imm1, imm2]
    );
  }
}

export class DeprecatedCallargs2 extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLARGS2,
      [v1, v2, v3]
    );
  }
}

export class WideStlexvar extends IRNode {
  constructor(imm1: Imm, imm2: Imm) {
    super(
      IRNodeKind.WIDE_STLEXVAR,
      [imm1, imm2]
    );
  }
}

export class DeprecatedCallargs3 extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg, v4: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLARGS3,
      [v1, v2, v3, v4]
    );
  }
}

export class WideGetmodulenamespace extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_GETMODULENAMESPACE,
      [imm]
    );
  }
}

export class DeprecatedCallrange extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLRANGE,
      [imm, v]
    );
  }
}

export class WideStmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_STMODULEVAR,
      [imm]
    );
  }
}

export class DeprecatedCallspread extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLSPREAD,
      [v1, v2, v3]
    );
  }
}

export class WideLdlocalmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_LDLOCALMODULEVAR,
      [imm]
    );
  }
}

export class DeprecatedCallthisrange extends IRNode {
  constructor(imm: Imm, v: VReg) {
    super(
      IRNodeKind.DEPRECATED_CALLTHISRANGE,
      [imm, v]
    );
  }
}

export class WideLdexternalmodulevar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_LDEXTERNALMODULEVAR,
      [imm]
    );
  }
}

export class DeprecatedDefineclasswithbuffer extends IRNode {
  constructor(method_id: string, imm1: Imm, imm2: Imm, v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_DEFINECLASSWITHBUFFER,
      [method_id, imm1, imm2, v1, v2]
    );
  }
}

export class WideLdpatchvar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_LDPATCHVAR,
      [imm]
    );
  }
}

export class DeprecatedResumegenerator extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_RESUMEGENERATOR,
      [v]
    );
  }
}

export class WideStpatchvar extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.WIDE_STPATCHVAR,
      [imm]
    );
  }
}

export class DeprecatedGetresumemode extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_GETRESUMEMODE,
      [v]
    );
  }
}

export class DeprecatedGettemplateobject extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_GETTEMPLATEOBJECT,
      [v]
    );
  }
}

export class DeprecatedDelobjprop extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_DELOBJPROP,
      [v1, v2]
    );
  }
}

export class DeprecatedSuspendgenerator extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_SUSPENDGENERATOR,
      [v1, v2]
    );
  }
}

export class DeprecatedAsyncfunctionawaituncaught extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_ASYNCFUNCTIONAWAITUNCAUGHT,
      [v1, v2]
    );
  }
}

export class DeprecatedCopydataproperties extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_COPYDATAPROPERTIES,
      [v1, v2]
    );
  }
}

export class DeprecatedSetobjectwithproto extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_SETOBJECTWITHPROTO,
      [v1, v2]
    );
  }
}

export class DeprecatedLdobjbyvalue extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_LDOBJBYVALUE,
      [v1, v2]
    );
  }
}

export class DeprecatedLdsuperbyvalue extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_LDSUPERBYVALUE,
      [v1, v2]
    );
  }
}

export class DeprecatedLdobjbyindex extends IRNode {
  constructor(v: VReg, imm: Imm) {
    super(
      IRNodeKind.DEPRECATED_LDOBJBYINDEX,
      [v, imm]
    );
  }
}

export class DeprecatedAsyncfunctionresolve extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg) {
    super(
      IRNodeKind.DEPRECATED_ASYNCFUNCTIONRESOLVE,
      [v1, v2, v3]
    );
  }
}

export class DeprecatedAsyncfunctionreject extends IRNode {
  constructor(v1: VReg, v2: VReg, v3: VReg) {
    super(
      IRNodeKind.DEPRECATED_ASYNCFUNCTIONREJECT,
      [v1, v2, v3]
    );
  }
}

export class DeprecatedStlexvar extends IRNode {
  constructor(imm1: Imm, imm2: Imm, v: VReg) {
    super(
      IRNodeKind.DEPRECATED_STLEXVAR,
      [imm1, imm2, v]
    );
  }
}

export class DeprecatedGetmodulenamespace extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.DEPRECATED_GETMODULENAMESPACE,
      [string_id]
    );
  }
}

export class DeprecatedStmodulevar extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.DEPRECATED_STMODULEVAR,
      [string_id]
    );
  }
}

export class DeprecatedLdobjbyname extends IRNode {
  constructor(string_id: string, v: VReg) {
    super(
      IRNodeKind.DEPRECATED_LDOBJBYNAME,
      [string_id, v]
    );
  }
}

export class DeprecatedLdsuperbyname extends IRNode {
  constructor(string_id: string, v: VReg) {
    super(
      IRNodeKind.DEPRECATED_LDSUPERBYNAME,
      [string_id, v]
    );
  }
}

export class DeprecatedLdmodulevar extends IRNode {
  constructor(string_id: string, imm: Imm) {
    super(
      IRNodeKind.DEPRECATED_LDMODULEVAR,
      [string_id, imm]
    );
  }
}

export class DeprecatedStconsttoglobalrecord extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.DEPRECATED_STCONSTTOGLOBALRECORD,
      [string_id]
    );
  }
}

export class DeprecatedStlettoglobalrecord extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.DEPRECATED_STLETTOGLOBALRECORD,
      [string_id]
    );
  }
}

export class DeprecatedStclasstoglobalrecord extends IRNode {
  constructor(string_id: string) {
    super(
      IRNodeKind.DEPRECATED_STCLASSTOGLOBALRECORD,
      [string_id]
    );
  }
}

export class DeprecatedLdhomeobject extends IRNode {
  constructor() {
    super(
      IRNodeKind.DEPRECATED_LDHOMEOBJECT,
      []
    );
  }
}

export class DeprecatedCreateobjecthavingmethod extends IRNode {
  constructor(imm: Imm) {
    super(
      IRNodeKind.DEPRECATED_CREATEOBJECTHAVINGMETHOD,
      [imm]
    );
  }
}

export class DeprecatedDynamicimport extends IRNode {
  constructor(v: VReg) {
    super(
      IRNodeKind.DEPRECATED_DYNAMICIMPORT,
      [v]
    );
  }
}

export class DeprecatedAsyncgeneratorreject extends IRNode {
  constructor(v1: VReg, v2: VReg) {
    super(
      IRNodeKind.DEPRECATED_ASYNCGENERATORREJECT,
      [v1, v2]
    );
  }
}

