import * as ts from "typescript";
import { CompilerDriver } from "./compilerDriver";
import { Decl, FunctionParameter, FunctionScope, Scope, VariableScope } from "./scope";
export declare class Recorder {
    node: ts.Node;
    scope: Scope;
    compilerDriver: CompilerDriver;
    recordType: boolean;
    private scopeMap;
    private hoistMap;
    private parametersMap;
    private funcNameMap;
    private class2Ctor;
    private isTsFile;
    private importStmts;
    private exportStmts;
    private syntaxCheckStatus;
    constructor(node: ts.Node, scope: Scope, compilerDriver: CompilerDriver, recordType: boolean, isTsFile: boolean, syntaxCheckStatus: boolean);
    record(): ts.Node;
    getCtorOfClass(node: ts.ClassLikeDeclaration): ts.ConstructorDeclaration;
    setCtorOfClass(node: ts.ClassLikeDeclaration, ctor: ts.ConstructorDeclaration): void;
    private setParent;
    private recordInfo;
    private recordClassInfo;
    buildVariableScope(curScope: Scope, node: ts.FunctionLikeDeclaration): FunctionScope;
    private recordVariableDecl;
    private addVariableDeclToScope;
    private getDeclarationNodeOfId;
    private recordImportInfo;
    private recordExportInfo;
    private getModuleSpecifier;
    private recordEcmaNamedBindings;
    private recordEcmaImportClause;
    private recordEcmaImportInfo;
    private recordEcmaExportDecl;
    private recordEcmaExportInfo;
    private recordFuncDecl;
    private recordOtherFunc;
    private recordFuncInfo;
    recordFuncName(node: ts.FunctionLikeDeclaration): void;
    recordFunctionParameters(node: ts.FunctionLikeDeclaration): void;
    recordPatternParameter(pattern: ts.BindingPattern, funcParams: Array<FunctionParameter>): void;
    isRestParameter(parameter: ts.ParameterDeclaration): boolean;
    private collectHoistDecls;
    setScopeMap(node: ts.Node, scope: Scope): void;
    getScopeMap(): Map<ts.Node, Scope>;
    getScopeOfNode(node: ts.Node): Scope;
    setHoistMap(scope: VariableScope, decl: Decl): void;
    getHoistMap(): Map<Scope, Decl[]>;
    getHoistDeclsOfScope(scope: VariableScope): Decl[];
    setParametersMap(node: ts.FunctionLikeDeclaration, parameters: FunctionParameter[]): void;
    getParametersOfFunction(node: ts.FunctionLikeDeclaration): FunctionParameter[];
    getFuncNameMap(): Map<string, number>;
}
//# sourceMappingURL=recorder.d.ts.map