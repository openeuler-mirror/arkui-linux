import { Dynamicimport, Closeiterator, Copydataproperties, Createarraywithbuffer, Createemptyarray, Createemptyobject, Createobjectwithbuffer, Createobjectwithexcludedkeys, Createregexpwithliteral, Defineclasswithbuffer, Definefunc, Definegettersetterbyvalue, Definemethod, Getiterator, Getnextpropname, Getpropiterator, Getmodulenamespace, Isfalse, Istrue, Ldglobalvar, Ldlexvar, Ldobjbyindex, Ldobjbyname, Ldsuperbyname, Newlexenv, Newlexenvwithname, Newobjrange, Poplexenv, Returnundefined, Setobjectwithproto, Starrayspread, Stconsttoglobalrecord, Stglobalvar, Stlexvar, Stmodulevar, Stobjbyindex, Stobjbyname, Stownbyindex, Stownbyvalue, Stownbyvaluewithnameset, Stsuperbyname, Stsuperbyvalue, Supercallthisrange, Supercallspread, ThrowConstassignment, ThrowDeletesuperproperty, ThrowIfnotobject, ThrowIfsupernotcorrectcall, ThrowPatternnoncoercible, ThrowNotexists, ThrowUndefinedifholewithname, Tryldglobalbyname, Trystglobalbyname, IRNode, Label, VReg, WideNewlexenv, WideNewlexenvwithname, WideLdlexvar, WideStlexvar, WideLdobjbyindex, WideStobjbyindex, WideStownbyindex, WideNewobjrange, WideCreateobjectwithexcludedkeys, WideSupercallthisrange, WideSupercallarrowrange, Supercallarrowrange, WideGetmodulenamespace, Ldlocalmodulevar, WideLdlocalmodulevar, Ldexternalmodulevar, WideLdexternalmodulevar, WideStmodulevar, Sttoglobalrecord } from "../irnodes";
export declare function loadAccumulatorInt(value: number): IRNode;
export declare function loadAccumulatorFloat(value: number): IRNode;
export declare function loadAccumulatorString(value: string): IRNode;
export declare function loadAccumulator(vreg: VReg): IRNode;
export declare function storeAccumulator(vreg: VReg): IRNode;
export declare function deleteObjProperty(obj: VReg): IRNode;
export declare function moveVreg(vd: VReg, vs: VReg): IRNode;
export declare function jumpTarget(target: Label): IRNode;
export declare function creatDebugger(): IRNode;
export declare function throwException(): IRNode;
export declare function throwConstAssignment(name: VReg): ThrowConstassignment;
export declare function throwUndefinedIfHole(name: string): ThrowUndefinedifholewithname;
export declare function throwThrowNotExists(): ThrowNotexists;
export declare function throwDeleteSuperProperty(): ThrowDeletesuperproperty;
export declare function newLexicalEnv(numVars: number, scopeInfoId: string | undefined): Newlexenv | WideNewlexenv | Newlexenvwithname | WideNewlexenvwithname;
export declare function popLexicalEnv(): Poplexenv;
export declare function loadLexicalVar(level: number, slot: number): WideLdlexvar | Ldlexvar;
export declare function storeLexicalVar(level: number, slot: number): WideStlexvar | Stlexvar;
export declare function tryLoadGlobalByName(key: string): Tryldglobalbyname;
export declare function tryStoreGlobalByName(key: string): Trystglobalbyname;
export declare function loadGlobalVar(name: string): Ldglobalvar;
export declare function storeGlobalVar(name: string): Stglobalvar;
export declare function loadObjByName(key: string): Ldobjbyname;
export declare function storeObjByName(obj: VReg, key: string): Stobjbyname;
export declare function loadObjByIndex(index: number): Ldobjbyindex | WideLdobjbyindex;
export declare function storeObjByIndex(obj: VReg, index: number): Stobjbyindex | WideStobjbyindex;
export declare function loadObjByValue(obj: VReg): IRNode;
export declare function storeObjByValue(obj: VReg, prop: VReg): IRNode;
export declare function storeOwnByName(obj: VReg, key: string, nameSetting: boolean): IRNode;
export declare function storeOwnByIndex(obj: VReg, index: number): Stownbyindex | WideStownbyindex;
export declare function storeOwnByValue(obj: VReg, value: VReg, nameSetting: boolean): Stownbyvaluewithnameset | Stownbyvalue;
export declare function throwIfSuperNotCorrectCall(num: number): ThrowIfsupernotcorrectcall;
export declare function call(args: VReg[], passThis: boolean): IRNode;
export declare function newObject(args: VReg[]): Newobjrange | WideNewobjrange;
export declare function getPropIterator(): Getpropiterator;
export declare function getNextPropName(iter: VReg): Getnextpropname;
export declare function returnUndefined(): Returnundefined;
export declare function createEmptyObject(): Createemptyobject;
export declare function createObjectWithBuffer(bufferId: string): Createobjectwithbuffer;
export declare function setObjectWithProto(proto: VReg): Setobjectwithproto;
export declare function copyDataProperties(dstObj: VReg): Copydataproperties;
export declare function defineGetterSetterByValue(obj: VReg, name: VReg, getter: VReg, setter: VReg): Definegettersetterbyvalue;
export declare function createEmptyArray(): Createemptyarray;
export declare function createArrayWithBuffer(bufferId: string): Createarraywithbuffer;
export declare function storeArraySpread(array: VReg, index: VReg): Starrayspread;
export declare function defineClassWithBuffer(id: string, litId: string, parameterLength: number, base: VReg): Defineclasswithbuffer;
export declare function createObjectWithExcludedKeys(obj: VReg, args: VReg[]): Createobjectwithexcludedkeys | WideCreateobjectwithexcludedkeys;
export declare function throwObjectNonCoercible(): ThrowPatternnoncoercible;
export declare function throwIfNotObject(v: VReg): ThrowIfnotobject;
export declare function getIterator(): Getiterator;
export declare function closeIterator(iter: VReg): Closeiterator;
export declare function superCall(num: number, args: Array<VReg>): Supercallthisrange | WideSupercallthisrange;
export declare function superCallInArrow(num: number, args: Array<VReg>): Supercallarrowrange | WideSupercallarrowrange;
export declare function superCallSpread(vs: VReg): Supercallspread;
export declare function ldSuperByName(key: string): Ldsuperbyname;
export declare function stSuperByName(obj: VReg, key: string): Stsuperbyname;
export declare function stSuperByValue(obj: VReg, prop: VReg): Stsuperbyvalue;
export declare function ldSuperByValue(obj: VReg): IRNode;
export declare function loadLocalModuleVariable(index: number): Ldlocalmodulevar | WideLdlocalmodulevar;
export declare function loadExternalModuleVariable(index: number): Ldexternalmodulevar | WideLdexternalmodulevar;
export declare function dynamicImport(): Dynamicimport;
export declare function storeModuleVariable(index: number): Stmodulevar | WideStmodulevar;
export declare function getModuleNamespace(moduleRequestIdx: number): Getmodulenamespace | WideGetmodulenamespace;
export declare function defineFunc(name: string, paramLength: number): Definefunc;
export declare function defineMethod(name: string, paramLength: number): Definemethod;
export declare function isTrue(): Istrue;
export declare function isFalse(): Isfalse;
export declare function createRegExpWithLiteral(pattern: string, flags: number): Createregexpwithliteral;
export declare function stLetOrClassToGlobalRecord(name: string): Sttoglobalrecord;
export declare function stConstToGlobalRecord(name: string): Stconsttoglobalrecord;
export declare function loadAccumulatorBigInt(value: string): IRNode;
//# sourceMappingURL=bcGenUtil.d.ts.map