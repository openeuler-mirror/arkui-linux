# Copyright (c) 2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# wrapper of target `executable()`
#
# parameters:
# - subsystem_name: subsystem name, default is "common"
# - part_name: part name, default is subsystem_name
# - configs: configs to add
# - remove_configs: configs to remove
# - use_exceptions: use exceptions, default is false
# - use_rtti: use rtti, default is false
template("ft_executable") {
  if (defined(invoker.output_dir)) {
    output_dir = invoker.output_dir
  } else {
    # Handle subsystem & part_name
    if (defined(invoker.subsystem_name) && defined(invoker.part_name)) {
      subsystem_name = invoker.subsystem_name
      part_name = invoker.part_name
    } else if (defined(invoker.part_name)) {
      assert("false", "Please set 'subsystem_name' for 'part_name'")
    } else if (defined(invoker.subsystem_name)) {
      subsystem_name = invoker.subsystem_name
      part_name = subsystem_name
    } else {
      subsystem_name = "common"
      part_name = subsystem_name
    }
    assert(subsystem_name != "",
           "[GN ERROR] Internal error, please contact maintainer.")
    assert(part_name != "",
           "[GN ERROR] Internal error, please contact maintainer.")

    # Change output dir
    # TODO: handle ft_test
    output_dir = "${root_out_dir}/${subsystem_name}/${part_name}"
  }

  # Call `executable()`
  executable("${target_name}") {
    forward_variables_from(invoker,
                           "*",
                           [
                             # variable_to_not_forward_list
                             "configs",
                             "remove_configs",
                             #"static_link",
                             #"external_deps",
                             #"install_images",
                             #"module_install_dir",
                             #"relative_install_dir",
                             #"symlink_target_name",
                             "output_dir",
                             #"install_enable",
                             "version_script",
                             #"license_file",
                             #"license_as_sources",
                             "use_exceptions",
                             "use_rtti",
                           ])
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }

    if (defined(invoker.remove_configs)) {
      configs -= invoker.remove_configs
    }

    if (defined(invoker.use_exceptions) && invoker.use_exceptions) {
      configs += [ "//build/gn/configs/compiler:exceptions" ]
      configs -= [ "//build/gn/configs/compiler:no_exceptions" ]
    }

    if (defined(invoker.use_rtti) && invoker.use_rtti) {
      configs += [ "//build/gn/configs/compiler:rtti" ]
      configs -= [ "//build/gn/configs/compiler:no_rtti" ]
    }
    if (defined(invoker.version_script)) {
      _version_script = rebase_path(invoker.version_script, root_build_dir)
      if (!defined(ldflags)) {
        ldflags = []
      }
      ldflags += [
        "-rdynamic",
        "-Wl,--version-script=${_version_script}",
      ]
    }
  }
  output_dir = output_dir
}
