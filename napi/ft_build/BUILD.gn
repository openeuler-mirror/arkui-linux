# Copyright (c) 2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//napi/ft_build/napi.gni")
import("//ace_engine/ft_build/ace_config.gni")

config("ace_napi_config") {
  include_dirs = [
    "//napi",
    "//napi/interfaces/inner_api",
    "//napi/interfaces/kits",
    # Fangtian TODO
    # "//third_party/node/src",
  ]
}


  ft_source_set("ace_napi_static") {
    defines = []
    public_configs = [ ":ace_napi_config" ]
  deps = [
    "//build/gn/configs/system_libs:c_utils",
    "//build/gn/configs/system_libs:libuv",
  ]

    sources = napi_sources

    if (current_cpu == "arm64") {
      defines += [ "_ARM64_" ]
    }
    if (current_os == "ohos" && current_cpu == "x86_64") {
      defines += [ "SIMULATOR" ]
    }

  if (use_linux) {
    defines += [ 
      "PREVIEW",
      "LINUX_PLATFORM",
    ]
  } else {
    # Fangtian TODO
    assert(false, "Fangtian TODO")
    # if (is_standard_system) {
    #   external_deps = [
    #     "hitrace_native:hitrace_meter",
    #     "hitrace_native:libhitracechain",
    #     "hiviewdfx_hilog_native:libhilog",
    #     "init:libbegetutil",
    #   ]
    #   defines += [ "ENABLE_HITRACE" ]
    #   if (product_name != "ohos-sdk") {
    #     if (napi_enable_container_scope) {
    #       if (target_os == "ios") {
    #         deps += [ ":ace_container_scope_static" ]
    #       } else {
    #         deps += [ ":ace_container_scope" ]
    #       }
    #       defines += [ "ENABLE_CONTAINER_SCOPE" ]
    #     }
    #   }
    # } else {
    #   external_deps = [ "hilog:libhilog" ]
    # }
    }

    cflags_cc = [ "-Wno-missing-braces" ]
  }

    ft_shared_library("ace_napi") {
      deps = [
        ":ace_napi_static",
      ]
      public_configs = [ ":ace_napi_config" ]
  }

  config("container_scope_config") {
    visibility = [ ":*" ]
    include_dirs = [ "$ace_root/frameworks" ]
  }

  ft_shared_library("ace_container_scope") {
    public_configs = [ ":container_scope_config" ]

  configs = [ "$ace_root/ft_build:ace_config" ]

    sources = [ "$ace_root/frameworks/core/common/container_scope.cpp" ]
  }

  ft_source_set("ace_container_scope_static") {
    public_configs = [ ":container_scope_config" ]

  configs = [ "$ace_root/ft_build:ace_config" ]

    sources = [ "$ace_root/frameworks/core/common/container_scope.cpp" ]
  }

  template("ace_napi_lib") {
    forward_variables_from(invoker, "*")
    if (defined(use_js_debug) && use_js_debug) {
      deps_ = [
    "../native_engine/impl/${engine_path}/ft_build:ace_napi_impl_${engine_path}_debug",
      ]
    } else {
      deps_ =
        [ "../native_engine/impl/${engine_path}/ft_build:ace_napi_impl_${engine_path}" ]
    }

      ft_shared_library(target_name) {
    public_configs = [ "../native_engine/impl/${engine_path}/ft_build:ace_napi_${engine_path}_config" ]

        deps = deps_
        if (defined(use_icu) && use_icu) {
      deps += [ "//build/gn/configs/system_libs:icu" ]
      }
    }
  }

  napi_libs = []

  foreach(item, ace_platforms) {
if (item.name == "ohos" || item.name == "fangtian" || is_cross_platform_build) {
  engine_config = {}
  support_engines = {}
      engine_config = item.config
      support_engines = engine_config.js_engines
      foreach(engine, support_engines) {
        if (engine.engine_name != "ark") {
          ace_napi_lib("ace_napi_${engine.engine_path}") {
            engine_path = engine.engine_path
          }
          napi_libs += [ ":ace_napi_${engine.engine_path}" ]
          if (defined(engine.have_debug) && engine.have_debug) {
            ace_napi_lib("ace_napi_${engine.engine_path}_debug") {
              engine_path = engine.engine_path
              use_js_debug = true
            }
            napi_libs += [ ":ace_napi_${engine.engine_path}_debug" ]
          }
        } else if (engine.engine_name == "ark") {
          ace_napi_lib("ace_napi_${engine.engine_name}") {
            engine_path = engine.engine_name
            use_icu = true
          }
          napi_libs += [ ":ace_napi_${engine.engine_name}" ]
        }
      }
    }
  }

  group("napi_packages") {
    deps = [ ":ace_napi" ]
    deps += napi_libs
  }

# Fangtian TODO

# ohos_ndk_library("libnapi_ndk") {
#   ndk_description_file = "./libnapi.ndk.json"
#   min_compact_version = "1"
#   output_name = "ace_napi"
# }

# ohos_ndk_headers("napi_header") {
#   dest_dir = "$ndk_headers_out_dir/napi"
#   sources = [ "//foundation/arkui/napi/interfaces/kits/napi/native_api.h" ]
# }

# group("napi_packages_ndk") {
#   deps = [ ":libnapi_ndk" ]
# }
